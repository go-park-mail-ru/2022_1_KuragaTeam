name: deploy

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev
      - main

jobs:
  tests:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.18.x'
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create env file
        run: touch .env;
          echo DBHOST=${{ secrets.DBHOST }} >> .env;
          echo DBPORT=${{ secrets.DBPORT }} >> .env;      
          echo DBUSER=${{ secrets.DBUSER }} >> .env;
          echo DBPASSWORD=${{ secrets.DBPASSWORD }} >> .env;
          echo DBNAME=${{ secrets.DBNAME }} >> .env;
          echo REDISHOST=${{ secrets.REDISHOST }} >> .env;
          echo REDISPORT=${{ secrets.REDISPORT }} >> .env;
          echo REDISPROTOCOL=${{ secrets.REDISPROTOCOL }} >> .env;
          echo MINIOURL=${{ secrets.MINIOURL }} >> .env;
          echo MINIOUSER=${{ secrets.MINIOUSER }} >> .env;
          echo MINIOPASSWORD=${{ secrets.MINIOPASSWORD }} >> .env;
          echo NGINX=${{ secrets.NGINX }} >> .env;
          echo CSRF_SECRET=${{ secrets.CSRF_SECRET }} >> .env;
          echo AUTH_HOST=${{ secrets.AUTH_HOST }} >> .env;
          echo AUTH_PORT=${{ secrets.AUTH_PORT }} >> .env;
          echo HOST=${{ secrets.HOST }} >> .env;
          echo PROFILE_HOST=${{ secrets.PROFILE_HOST }} >> .env;
          echo PROFILE_PORT=${{ secrets.PROFILE_PORT }} >> .env;
          echo MOVIE_HOST=${{ secrets.MOVIE_HOST }} >> .env;
          echo MOVIE_PORT=${{ secrets.MOVIE_PORT }} >> .env;
          echo COMPILATIONS_HOST=${{ secrets.COMPILATIONS_HOST }} >> .env;
          echo COMPILATIONS_PORT=${{ secrets.COMPILATIONS_PORT }} >> .env;
      - name: Run all tests
        run: make test
  linter:
    needs: tests
    name: ubuntu-latest
    runs-on: self-hosted
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.18.x'
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run linter
        run: |
          # binary will be $(go env GOPATH)/bin/golangci-lint
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.46.2
          $(go env GOPATH)/bin/golangci-lint run
  build:
    needs: [linter, tests]
    name: Build Docker
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create env file
        run: touch .env;
          echo DBHOST=${{ secrets.DBHOST }} >> .env;
          echo DBPORT=${{ secrets.DBPORT }} >> .env;
          echo DBUSER=${{ secrets.DBUSER }} >> .env;
          echo DBPASSWORD=${{ secrets.DBPASSWORD }} >> .env;
          echo DBNAME=${{ secrets.DBNAME }} >> .env;
          echo REDISHOST=${{ secrets.REDISHOST }} >> .env;
          echo REDISPORT=${{ secrets.REDISPORT }} >> .env;
          echo REDISPROTOCOL=${{ secrets.REDISPROTOCOL }} >> .env;
          echo MINIOURL=${{ secrets.MINIOURL }} >> .env;
          echo MINIOUSER=${{ secrets.MINIOUSER }} >> .env;
          echo MINIOPASSWORD=${{ secrets.MINIOPASSWORD }} >> .env;
          echo NGINX=${{ secrets.NGINX }} >> .env;
          echo CSRF_SECRET=${{ secrets.CSRF_SECRET }} >> .env;
          echo AUTH_HOST=${{ secrets.AUTH_HOST }} >> .env;
          echo AUTH_PORT=${{ secrets.AUTH_PORT }} >> .env;
          echo HOST=${{ secrets.HOST }} >> .env;
          echo PROFILE_HOST=${{ secrets.PROFILE_HOST }} >> .env;
          echo PROFILE_PORT=${{ secrets.PROFILE_PORT }} >> .env;
          echo MOVIE_HOST=${{ secrets.MOVIE_HOST }} >> .env;
          echo MOVIE_PORT=${{ secrets.MOVIE_PORT }} >> .env;
          echo COMPILATIONS_HOST=${{ secrets.COMPILATIONS_HOST }} >> .env;
          echo COMPILATIONS_PORT=${{ secrets.COMPILATIONS_PORT }} >> .env;
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push authorization
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./cmd/authorization/Dockerfile
          platforms: linux/amd64
          push: true
          tags: moviespace/authorization:latest
      - name: Build and push profile
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./cmd/profile/Dockerfile
          platforms: linux/amd64
          push: true
          tags: moviespace/profile:latest
      - name: Build and push movie
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./cmd/movie/Dockerfile
          platforms: linux/amd64
          push: true
          tags: moviespace/movie:latest
      - name: Build and push compilations
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./cmd/compilations/Dockerfile
          platforms: linux/amd64
          push: true
          tags: moviespace/compilations:latest
      - name: Build and push main
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./cmd/main/Dockerfile
          platforms: linux/amd64
          push: true
          tags: moviespace/main:latest

  deploy:
    needs: build
    name: Deploy
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create env file
        run: touch .env;
          echo DBHOST=${{ secrets.DBHOST }} >> .env;
          echo DBPORT=${{ secrets.DBPORT }} >> .env;
          echo DBUSER=${{ secrets.DBUSER }} >> .env;
          echo DBPASSWORD=${{ secrets.DBPASSWORD }} >> .env;
          echo DBNAME=${{ secrets.DBNAME }} >> .env;
          echo REDISHOST=${{ secrets.REDISHOST }} >> .env;
          echo REDISPORT=${{ secrets.REDISPORT }} >> .env;
          echo REDISPROTOCOL=${{ secrets.REDISPROTOCOL }} >> .env;
          echo MINIOURL=${{ secrets.MINIOURL }} >> .env;
          echo MINIOUSER=${{ secrets.MINIOUSER }} >> .env;
          echo MINIOPASSWORD=${{ secrets.MINIOPASSWORD }} >> .env;
          echo NGINX=${{ secrets.NGINX }} >> .env;
          echo CSRF_SECRET=${{ secrets.CSRF_SECRET }} >> .env;
          echo AUTH_HOST=${{ secrets.AUTH_HOST }} >> .env;
          echo AUTH_PORT=${{ secrets.AUTH_PORT }} >> .env;
          echo HOST=${{ secrets.HOST }} >> .env;
          echo PROFILE_HOST=${{ secrets.PROFILE_HOST }} >> .env;
          echo PROFILE_PORT=${{ secrets.PROFILE_PORT }} >> .env;
          echo MOVIE_HOST=${{ secrets.MOVIE_HOST }} >> .env;
          echo MOVIE_PORT=${{ secrets.MOVIE_PORT }} >> .env;
          echo COMPILATIONS_HOST=${{ secrets.COMPILATIONS_HOST }} >> .env;
          echo COMPILATIONS_PORT=${{ secrets.COMPILATIONS_PORT }} >> .env;
      - name: Pull docker images
        run : |
          sudo docker-compose -f docker-compose-cd.yml pull
      - name: Run docker-compose
        run : |
          sudo docker-compose -f docker-compose-cd.yml up --build -d
      - name: Clear old images and containers
        run : |
          sudo docker container prune
          sudo docker image prune