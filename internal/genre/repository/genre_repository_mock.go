// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"myapp/internal"
	"myapp/internal/genre"
	"sync"
)

// Ensure, that MockGenreStorage does implement genre.Storage.
// If this is not the case, regenerate this file with moq.
var _ genre.Storage = &MockGenreStorage{}

// MockGenreStorage is a mock implementation of genre.Storage.
//
// 	func TestSomethingThatUsesStorage(t *testing.T) {
//
// 		// make and configure a mocked genre.Storage
// 		mockedStorage := &MockGenreStorage{
// 			GetByMovieIDFunc: func(id int) ([]internal.Genre, error) {
// 				panic("mock out the GetByMovieID method")
// 			},
// 		}
//
// 		// use mockedStorage in code that requires genre.Storage
// 		// and then make assertions.
//
// 	}
type MockGenreStorage struct {
	// GetByMovieIDFunc mocks the GetByMovieID method.
	GetByMovieIDFunc func(id int) ([]internal.Genre, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetByMovieID holds details about calls to the GetByMovieID method.
		GetByMovieID []struct {
			// ID is the id argument value.
			ID int
		}
	}
	lockGetByMovieID sync.RWMutex
}

// GetByMovieID calls GetByMovieIDFunc.
func (mock *MockGenreStorage) GetByMovieID(id int) ([]internal.Genre, error) {
	if mock.GetByMovieIDFunc == nil {
		panic("MockGenreStorage.GetByMovieIDFunc: method is nil but Storage.GetByMovieID was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockGetByMovieID.Lock()
	mock.calls.GetByMovieID = append(mock.calls.GetByMovieID, callInfo)
	mock.lockGetByMovieID.Unlock()
	return mock.GetByMovieIDFunc(id)
}

// GetByMovieIDCalls gets all the calls that were made to GetByMovieID.
// Check the length with:
//     len(mockedStorage.GetByMovieIDCalls())
func (mock *MockGenreStorage) GetByMovieIDCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockGetByMovieID.RLock()
	calls = mock.calls.GetByMovieID
	mock.lockGetByMovieID.RUnlock()
	return calls
}
