// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"myapp/internal/moviesCompilations"
	"sync"
)

// Ensure, that MockMovieCompilationService does implement moviesCompilations.Service.
// If this is not the case, regenerate this file with moq.
var _ moviesCompilations.Service = &MockMovieCompilationService{}

// MockMovieCompilationService is a mock implementation of moviesCompilations.Service.
//
// 	func TestSomethingThatUsesService(t *testing.T) {
//
// 		// make and configure a mocked moviesCompilations.Service
// 		mockedService := &MockMovieCompilationService{
// 			GetByCountryFunc: func(countryID int) (moviesCompilations.MovieCompilation, error) {
// 				panic("mock out the GetByCountry method")
// 			},
// 			GetByGenreFunc: func(genreID int) (moviesCompilations.MovieCompilation, error) {
// 				panic("mock out the GetByGenre method")
// 			},
// 			GetByMovieFunc: func(movieID int) (moviesCompilations.MovieCompilation, error) {
// 				panic("mock out the GetByMovie method")
// 			},
// 			GetByPersonFunc: func(personID int) (moviesCompilations.MovieCompilation, error) {
// 				panic("mock out the GetByPerson method")
// 			},
// 			GetMainCompilationsFunc: func() ([]moviesCompilations.MovieCompilation, error) {
// 				panic("mock out the GetMainCompilations method")
// 			},
// 			GetTopFunc: func(limit int) (moviesCompilations.MovieCompilation, error) {
// 				panic("mock out the GetTop method")
// 			},
// 			GetTopByYearFunc: func(year int) (moviesCompilations.MovieCompilation, error) {
// 				panic("mock out the GetTopByYear method")
// 			},
// 		}
//
// 		// use mockedService in code that requires moviesCompilations.Service
// 		// and then make assertions.
//
// 	}
type MockMovieCompilationService struct {
	// GetByCountryFunc mocks the GetByCountry method.
	GetByCountryFunc func(countryID int) (moviesCompilations.MovieCompilation, error)

	// GetByGenreFunc mocks the GetByGenre method.
	GetByGenreFunc func(genreID int) (moviesCompilations.MovieCompilation, error)

	// GetByMovieFunc mocks the GetByMovie method.
	GetByMovieFunc func(movieID int) (moviesCompilations.MovieCompilation, error)

	// GetByPersonFunc mocks the GetByPerson method.
	GetByPersonFunc func(personID int) (moviesCompilations.MovieCompilation, error)

	// GetMainCompilationsFunc mocks the GetMainCompilations method.
	GetMainCompilationsFunc func() ([]moviesCompilations.MovieCompilation, error)

	// GetTopFunc mocks the GetTop method.
	GetTopFunc func(limit int) (moviesCompilations.MovieCompilation, error)

	// GetTopByYearFunc mocks the GetTopByYear method.
	GetTopByYearFunc func(year int) (moviesCompilations.MovieCompilation, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetByCountry holds details about calls to the GetByCountry method.
		GetByCountry []struct {
			// CountryID is the countryID argument value.
			CountryID int
		}
		// GetByGenre holds details about calls to the GetByGenre method.
		GetByGenre []struct {
			// GenreID is the genreID argument value.
			GenreID int
		}
		// GetByMovie holds details about calls to the GetByMovie method.
		GetByMovie []struct {
			// MovieID is the movieID argument value.
			MovieID int
		}
		// GetByPerson holds details about calls to the GetByPerson method.
		GetByPerson []struct {
			// PersonID is the personID argument value.
			PersonID int
		}
		// GetMainCompilations holds details about calls to the GetMainCompilations method.
		GetMainCompilations []struct {
		}
		// GetTop holds details about calls to the GetTop method.
		GetTop []struct {
			// Limit is the limit argument value.
			Limit int
		}
		// GetTopByYear holds details about calls to the GetTopByYear method.
		GetTopByYear []struct {
			// Year is the year argument value.
			Year int
		}
	}
	lockGetByCountry        sync.RWMutex
	lockGetByGenre          sync.RWMutex
	lockGetByMovie          sync.RWMutex
	lockGetByPerson         sync.RWMutex
	lockGetMainCompilations sync.RWMutex
	lockGetTop              sync.RWMutex
	lockGetTopByYear        sync.RWMutex
}

// GetByCountry calls GetByCountryFunc.
func (mock *MockMovieCompilationService) GetByCountry(countryID int) (moviesCompilations.MovieCompilation, error) {
	if mock.GetByCountryFunc == nil {
		panic("MockMovieCompilationService.GetByCountryFunc: method is nil but Service.GetByCountry was just called")
	}
	callInfo := struct {
		CountryID int
	}{
		CountryID: countryID,
	}
	mock.lockGetByCountry.Lock()
	mock.calls.GetByCountry = append(mock.calls.GetByCountry, callInfo)
	mock.lockGetByCountry.Unlock()
	return mock.GetByCountryFunc(countryID)
}

// GetByCountryCalls gets all the calls that were made to GetByCountry.
// Check the length with:
//     len(mockedService.GetByCountryCalls())
func (mock *MockMovieCompilationService) GetByCountryCalls() []struct {
	CountryID int
} {
	var calls []struct {
		CountryID int
	}
	mock.lockGetByCountry.RLock()
	calls = mock.calls.GetByCountry
	mock.lockGetByCountry.RUnlock()
	return calls
}

// GetByGenre calls GetByGenreFunc.
func (mock *MockMovieCompilationService) GetByGenre(genreID int) (moviesCompilations.MovieCompilation, error) {
	if mock.GetByGenreFunc == nil {
		panic("MockMovieCompilationService.GetByGenreFunc: method is nil but Service.GetByGenre was just called")
	}
	callInfo := struct {
		GenreID int
	}{
		GenreID: genreID,
	}
	mock.lockGetByGenre.Lock()
	mock.calls.GetByGenre = append(mock.calls.GetByGenre, callInfo)
	mock.lockGetByGenre.Unlock()
	return mock.GetByGenreFunc(genreID)
}

// GetByGenreCalls gets all the calls that were made to GetByGenre.
// Check the length with:
//     len(mockedService.GetByGenreCalls())
func (mock *MockMovieCompilationService) GetByGenreCalls() []struct {
	GenreID int
} {
	var calls []struct {
		GenreID int
	}
	mock.lockGetByGenre.RLock()
	calls = mock.calls.GetByGenre
	mock.lockGetByGenre.RUnlock()
	return calls
}

// GetByMovie calls GetByMovieFunc.
func (mock *MockMovieCompilationService) GetByMovie(movieID int) (moviesCompilations.MovieCompilation, error) {
	if mock.GetByMovieFunc == nil {
		panic("MockMovieCompilationService.GetByMovieFunc: method is nil but Service.GetByMovie was just called")
	}
	callInfo := struct {
		MovieID int
	}{
		MovieID: movieID,
	}
	mock.lockGetByMovie.Lock()
	mock.calls.GetByMovie = append(mock.calls.GetByMovie, callInfo)
	mock.lockGetByMovie.Unlock()
	return mock.GetByMovieFunc(movieID)
}

// GetByMovieCalls gets all the calls that were made to GetByMovie.
// Check the length with:
//     len(mockedService.GetByMovieCalls())
func (mock *MockMovieCompilationService) GetByMovieCalls() []struct {
	MovieID int
} {
	var calls []struct {
		MovieID int
	}
	mock.lockGetByMovie.RLock()
	calls = mock.calls.GetByMovie
	mock.lockGetByMovie.RUnlock()
	return calls
}

// GetByPerson calls GetByPersonFunc.
func (mock *MockMovieCompilationService) GetByPerson(personID int) (moviesCompilations.MovieCompilation, error) {
	if mock.GetByPersonFunc == nil {
		panic("MockMovieCompilationService.GetByPersonFunc: method is nil but Service.GetByPerson was just called")
	}
	callInfo := struct {
		PersonID int
	}{
		PersonID: personID,
	}
	mock.lockGetByPerson.Lock()
	mock.calls.GetByPerson = append(mock.calls.GetByPerson, callInfo)
	mock.lockGetByPerson.Unlock()
	return mock.GetByPersonFunc(personID)
}

// GetByPersonCalls gets all the calls that were made to GetByPerson.
// Check the length with:
//     len(mockedService.GetByPersonCalls())
func (mock *MockMovieCompilationService) GetByPersonCalls() []struct {
	PersonID int
} {
	var calls []struct {
		PersonID int
	}
	mock.lockGetByPerson.RLock()
	calls = mock.calls.GetByPerson
	mock.lockGetByPerson.RUnlock()
	return calls
}

// GetMainCompilations calls GetMainCompilationsFunc.
func (mock *MockMovieCompilationService) GetMainCompilations() ([]moviesCompilations.MovieCompilation, error) {
	if mock.GetMainCompilationsFunc == nil {
		panic("MockMovieCompilationService.GetMainCompilationsFunc: method is nil but Service.GetMainCompilations was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetMainCompilations.Lock()
	mock.calls.GetMainCompilations = append(mock.calls.GetMainCompilations, callInfo)
	mock.lockGetMainCompilations.Unlock()
	return mock.GetMainCompilationsFunc()
}

// GetMainCompilationsCalls gets all the calls that were made to GetMainCompilations.
// Check the length with:
//     len(mockedService.GetMainCompilationsCalls())
func (mock *MockMovieCompilationService) GetMainCompilationsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetMainCompilations.RLock()
	calls = mock.calls.GetMainCompilations
	mock.lockGetMainCompilations.RUnlock()
	return calls
}

// GetTop calls GetTopFunc.
func (mock *MockMovieCompilationService) GetTop(limit int) (moviesCompilations.MovieCompilation, error) {
	if mock.GetTopFunc == nil {
		panic("MockMovieCompilationService.GetTopFunc: method is nil but Service.GetTop was just called")
	}
	callInfo := struct {
		Limit int
	}{
		Limit: limit,
	}
	mock.lockGetTop.Lock()
	mock.calls.GetTop = append(mock.calls.GetTop, callInfo)
	mock.lockGetTop.Unlock()
	return mock.GetTopFunc(limit)
}

// GetTopCalls gets all the calls that were made to GetTop.
// Check the length with:
//     len(mockedService.GetTopCalls())
func (mock *MockMovieCompilationService) GetTopCalls() []struct {
	Limit int
} {
	var calls []struct {
		Limit int
	}
	mock.lockGetTop.RLock()
	calls = mock.calls.GetTop
	mock.lockGetTop.RUnlock()
	return calls
}

// GetTopByYear calls GetTopByYearFunc.
func (mock *MockMovieCompilationService) GetTopByYear(year int) (moviesCompilations.MovieCompilation, error) {
	if mock.GetTopByYearFunc == nil {
		panic("MockMovieCompilationService.GetTopByYearFunc: method is nil but Service.GetTopByYear was just called")
	}
	callInfo := struct {
		Year int
	}{
		Year: year,
	}
	mock.lockGetTopByYear.Lock()
	mock.calls.GetTopByYear = append(mock.calls.GetTopByYear, callInfo)
	mock.lockGetTopByYear.Unlock()
	return mock.GetTopByYearFunc(year)
}

// GetTopByYearCalls gets all the calls that were made to GetTopByYear.
// Check the length with:
//     len(mockedService.GetTopByYearCalls())
func (mock *MockMovieCompilationService) GetTopByYearCalls() []struct {
	Year int
} {
	var calls []struct {
		Year int
	}
	mock.lockGetTopByYear.RLock()
	calls = mock.calls.GetTopByYear
	mock.lockGetTopByYear.RUnlock()
	return calls
}
