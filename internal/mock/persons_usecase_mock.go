// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"myapp/internal"
	"myapp/internal/persons"
	"sync"
)

// Ensure, that MockPersonsService does implement persons.Service.
// If this is not the case, regenerate this file with moq.
var _ persons.Service = &MockPersonsService{}

// MockPersonsService is a mock implementation of persons.Service.
//
// 	func TestSomethingThatUsesService(t *testing.T) {
//
// 		// make and configure a mocked persons.Service
// 		mockedService := &MockPersonsService{
// 			GetByIDFunc: func(id int) (*internal.Person, error) {
// 				panic("mock out the GetByID method")
// 			},
// 		}
//
// 		// use mockedService in code that requires persons.Service
// 		// and then make assertions.
//
// 	}
type MockPersonsService struct {
	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(id int) (*internal.Person, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// ID is the id argument value.
			ID int
		}
	}
	lockGetByID sync.RWMutex
}

// GetByID calls GetByIDFunc.
func (mock *MockPersonsService) GetByID(id int) (*internal.Person, error) {
	if mock.GetByIDFunc == nil {
		panic("MockPersonsService.GetByIDFunc: method is nil but Service.GetByID was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//     len(mockedService.GetByIDCalls())
func (mock *MockPersonsService) GetByIDCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}
