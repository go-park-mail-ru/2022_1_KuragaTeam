// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"myapp/internal"
	"myapp/internal/movie"
	"sync"
)

// Ensure, that MockMovieService does implement movie.Service.
// If this is not the case, regenerate this file with moq.
var _ movie.Service = &MockMovieService{}

// MockMovieService is a mock implementation of movie.Service.
//
// 	func TestSomethingThatUsesService(t *testing.T) {
//
// 		// make and configure a mocked movie.Service
// 		mockedService := &MockMovieService{
// 			GetByIDFunc: func(id int) (*internal.Movie, error) {
// 				panic("mock out the GetByID method")
// 			},
// 			GetMainMovieFunc: func() (*internal.MainMovieInfoDTO, error) {
// 				panic("mock out the GetMainMovie method")
// 			},
// 			GetRandomFunc: func(limit int, offset int) ([]internal.Movie, error) {
// 				panic("mock out the GetRandom method")
// 			},
// 		}
//
// 		// use mockedService in code that requires movie.Service
// 		// and then make assertions.
//
// 	}
type MockMovieService struct {
	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(id int) (*internal.Movie, error)

	// GetMainMovieFunc mocks the GetMainMovie method.
	GetMainMovieFunc func() (*internal.MainMovieInfoDTO, error)

	// GetRandomFunc mocks the GetRandom method.
	GetRandomFunc func(limit int, offset int) ([]internal.Movie, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// ID is the id argument value.
			ID int
		}
		// GetMainMovie holds details about calls to the GetMainMovie method.
		GetMainMovie []struct {
		}
		// GetRandom holds details about calls to the GetRandom method.
		GetRandom []struct {
			// Limit is the limit argument value.
			Limit int
			// Offset is the offset argument value.
			Offset int
		}
	}
	lockGetByID      sync.RWMutex
	lockGetMainMovie sync.RWMutex
	lockGetRandom    sync.RWMutex
}

// GetByID calls GetByIDFunc.
func (mock *MockMovieService) GetByID(id int) (*internal.Movie, error) {
	if mock.GetByIDFunc == nil {
		panic("MockMovieService.GetByIDFunc: method is nil but Service.GetByID was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//     len(mockedService.GetByIDCalls())
func (mock *MockMovieService) GetByIDCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// GetMainMovie calls GetMainMovieFunc.
func (mock *MockMovieService) GetMainMovie() (*internal.MainMovieInfoDTO, error) {
	if mock.GetMainMovieFunc == nil {
		panic("MockMovieService.GetMainMovieFunc: method is nil but Service.GetMainMovie was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetMainMovie.Lock()
	mock.calls.GetMainMovie = append(mock.calls.GetMainMovie, callInfo)
	mock.lockGetMainMovie.Unlock()
	return mock.GetMainMovieFunc()
}

// GetMainMovieCalls gets all the calls that were made to GetMainMovie.
// Check the length with:
//     len(mockedService.GetMainMovieCalls())
func (mock *MockMovieService) GetMainMovieCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetMainMovie.RLock()
	calls = mock.calls.GetMainMovie
	mock.lockGetMainMovie.RUnlock()
	return calls
}

// GetRandom calls GetRandomFunc.
func (mock *MockMovieService) GetRandom(limit int, offset int) ([]internal.Movie, error) {
	if mock.GetRandomFunc == nil {
		panic("MockMovieService.GetRandomFunc: method is nil but Service.GetRandom was just called")
	}
	callInfo := struct {
		Limit  int
		Offset int
	}{
		Limit:  limit,
		Offset: offset,
	}
	mock.lockGetRandom.Lock()
	mock.calls.GetRandom = append(mock.calls.GetRandom, callInfo)
	mock.lockGetRandom.Unlock()
	return mock.GetRandomFunc(limit, offset)
}

// GetRandomCalls gets all the calls that were made to GetRandom.
// Check the length with:
//     len(mockedService.GetRandomCalls())
func (mock *MockMovieService) GetRandomCalls() []struct {
	Limit  int
	Offset int
} {
	var calls []struct {
		Limit  int
		Offset int
	}
	mock.lockGetRandom.RLock()
	calls = mock.calls.GetRandom
	mock.lockGetRandom.RUnlock()
	return calls
}
