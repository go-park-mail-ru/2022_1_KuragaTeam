// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/user/usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	user "myapp/internal/user"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CheckAuthorization mocks base method.
func (m *MockService) CheckAuthorization(session string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuthorization", session)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuthorization indicates an expected call of CheckAuthorization.
func (mr *MockServiceMockRecorder) CheckAuthorization(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuthorization", reflect.TypeOf((*MockService)(nil).CheckAuthorization), session)
}

// EditAvatar mocks base method.
func (m *MockService) EditAvatar(dto *user.EditAvatarDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditAvatar", dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditAvatar indicates an expected call of EditAvatar.
func (mr *MockServiceMockRecorder) EditAvatar(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditAvatar", reflect.TypeOf((*MockService)(nil).EditAvatar), dto)
}

// EditProfile mocks base method.
func (m *MockService) EditProfile(dto *user.EditProfileDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditProfile", dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditProfile indicates an expected call of EditProfile.
func (mr *MockServiceMockRecorder) EditProfile(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProfile", reflect.TypeOf((*MockService)(nil).EditProfile), dto)
}

// GetAvatar mocks base method.
func (m *MockService) GetAvatar(userID int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatar", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvatar indicates an expected call of GetAvatar.
func (mr *MockServiceMockRecorder) GetAvatar(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatar", reflect.TypeOf((*MockService)(nil).GetAvatar), userID)
}

// GetUserProfile mocks base method.
func (m *MockService) GetUserProfile(userID int64) (*user.ProfileUserDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", userID)
	ret0, _ := ret[0].(*user.ProfileUserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockServiceMockRecorder) GetUserProfile(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockService)(nil).GetUserProfile), userID)
}

// LogIn mocks base method.
func (m *MockService) LogIn(dto *user.LogInUserDTO) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogIn", dto)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogIn indicates an expected call of LogIn.
func (mr *MockServiceMockRecorder) LogIn(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogIn", reflect.TypeOf((*MockService)(nil).LogIn), dto)
}

// LogOut mocks base method.
func (m *MockService) LogOut(session string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogOut", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogOut indicates an expected call of LogOut.
func (mr *MockServiceMockRecorder) LogOut(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogOut", reflect.TypeOf((*MockService)(nil).LogOut), session)
}

// SignUp mocks base method.
func (m *MockService) SignUp(dto *user.CreateUserDTO) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", dto)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignUp indicates an expected call of SignUp.
func (mr *MockServiceMockRecorder) SignUp(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockService)(nil).SignUp), dto)
}

// UploadAvatar mocks base method.
func (m *MockService) UploadAvatar(file io.Reader, size int64, contentType string, userID int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAvatar", file, size, contentType, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadAvatar indicates an expected call of UploadAvatar.
func (mr *MockServiceMockRecorder) UploadAvatar(file, size, contentType, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAvatar", reflect.TypeOf((*MockService)(nil).UploadAvatar), file, size, contentType, userID)
}
