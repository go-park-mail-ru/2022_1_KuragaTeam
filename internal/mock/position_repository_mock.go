// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"myapp/internal/position"
	"sync"
)

// Ensure, that MockPositionStorage does implement position.Storage.
// If this is not the case, regenerate this file with moq.
var _ position.Storage = &MockPositionStorage{}

// MockPositionStorage is a mock implementation of position.Storage.
//
// 	func TestSomethingThatUsesStorage(t *testing.T) {
//
// 		// make and configure a mocked position.Storage
// 		mockedStorage := &MockPositionStorage{
// 			GetByPersonIDFunc: func(id int) ([]string, error) {
// 				panic("mock out the GetByPersonID method")
// 			},
// 			GetPersonPosByMovieIDFunc: func(personID int, movieId int) (string, error) {
// 				panic("mock out the GetPersonPosByMovieID method")
// 			},
// 		}
//
// 		// use mockedStorage in code that requires position.Storage
// 		// and then make assertions.
//
// 	}
type MockPositionStorage struct {
	// GetByPersonIDFunc mocks the GetByPersonID method.
	GetByPersonIDFunc func(id int) ([]string, error)

	// GetPersonPosByMovieIDFunc mocks the GetPersonPosByMovieID method.
	GetPersonPosByMovieIDFunc func(personID int, movieId int) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetByPersonID holds details about calls to the GetByPersonID method.
		GetByPersonID []struct {
			// ID is the id argument value.
			ID int
		}
		// GetPersonPosByMovieID holds details about calls to the GetPersonPosByMovieID method.
		GetPersonPosByMovieID []struct {
			// PersonID is the personID argument value.
			PersonID int
			// MovieId is the movieId argument value.
			MovieId int
		}
	}
	lockGetByPersonID         sync.RWMutex
	lockGetPersonPosByMovieID sync.RWMutex
}

// GetByPersonID calls GetByPersonIDFunc.
func (mock *MockPositionStorage) GetByPersonID(id int) ([]string, error) {
	if mock.GetByPersonIDFunc == nil {
		panic("MockPositionStorage.GetByPersonIDFunc: method is nil but Storage.GetByPersonID was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockGetByPersonID.Lock()
	mock.calls.GetByPersonID = append(mock.calls.GetByPersonID, callInfo)
	mock.lockGetByPersonID.Unlock()
	return mock.GetByPersonIDFunc(id)
}

// GetByPersonIDCalls gets all the calls that were made to GetByPersonID.
// Check the length with:
//     len(mockedStorage.GetByPersonIDCalls())
func (mock *MockPositionStorage) GetByPersonIDCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockGetByPersonID.RLock()
	calls = mock.calls.GetByPersonID
	mock.lockGetByPersonID.RUnlock()
	return calls
}

// GetPersonPosByMovieID calls GetPersonPosByMovieIDFunc.
func (mock *MockPositionStorage) GetPersonPosByMovieID(personID int, movieId int) (string, error) {
	if mock.GetPersonPosByMovieIDFunc == nil {
		panic("MockPositionStorage.GetPersonPosByMovieIDFunc: method is nil but Storage.GetPersonPosByMovieID was just called")
	}
	callInfo := struct {
		PersonID int
		MovieId  int
	}{
		PersonID: personID,
		MovieId:  movieId,
	}
	mock.lockGetPersonPosByMovieID.Lock()
	mock.calls.GetPersonPosByMovieID = append(mock.calls.GetPersonPosByMovieID, callInfo)
	mock.lockGetPersonPosByMovieID.Unlock()
	return mock.GetPersonPosByMovieIDFunc(personID, movieId)
}

// GetPersonPosByMovieIDCalls gets all the calls that were made to GetPersonPosByMovieID.
// Check the length with:
//     len(mockedStorage.GetPersonPosByMovieIDCalls())
func (mock *MockPositionStorage) GetPersonPosByMovieIDCalls() []struct {
	PersonID int
	MovieId  int
} {
	var calls []struct {
		PersonID int
		MovieId  int
	}
	mock.lockGetPersonPosByMovieID.RLock()
	calls = mock.calls.GetPersonPosByMovieID
	mock.lockGetPersonPosByMovieID.RUnlock()
	return calls
}
