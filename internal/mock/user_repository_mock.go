// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/user/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	user "myapp/internal/user"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockStorage) CreateUser(user *user.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStorageMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStorage)(nil).CreateUser), user)
}

// EditAvatar mocks base method.
func (m *MockStorage) EditAvatar(user *user.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditAvatar", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditAvatar indicates an expected call of EditAvatar.
func (mr *MockStorageMockRecorder) EditAvatar(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditAvatar", reflect.TypeOf((*MockStorage)(nil).EditAvatar), user)
}

// EditProfile mocks base method.
func (m *MockStorage) EditProfile(user *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditProfile", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditProfile indicates an expected call of EditProfile.
func (mr *MockStorageMockRecorder) EditProfile(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProfile", reflect.TypeOf((*MockStorage)(nil).EditProfile), user)
}

// GetAvatar mocks base method.
func (m *MockStorage) GetAvatar(userID int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatar", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvatar indicates an expected call of GetAvatar.
func (mr *MockStorageMockRecorder) GetAvatar(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatar", reflect.TypeOf((*MockStorage)(nil).GetAvatar), userID)
}

// GetUserProfile mocks base method.
func (m *MockStorage) GetUserProfile(userID int64) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", userID)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockStorageMockRecorder) GetUserProfile(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockStorage)(nil).GetUserProfile), userID)
}

// IsUserExists mocks base method.
func (m *MockStorage) IsUserExists(user *user.User) (int64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExists", user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsUserExists indicates an expected call of IsUserExists.
func (mr *MockStorageMockRecorder) IsUserExists(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExists", reflect.TypeOf((*MockStorage)(nil).IsUserExists), user)
}

// IsUserUnique mocks base method.
func (m *MockStorage) IsUserUnique(user *user.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserUnique", user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserUnique indicates an expected call of IsUserUnique.
func (mr *MockStorageMockRecorder) IsUserUnique(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserUnique", reflect.TypeOf((*MockStorage)(nil).IsUserUnique), user)
}

// MockRedisStore is a mock of RedisStore interface.
type MockRedisStore struct {
	ctrl     *gomock.Controller
	recorder *MockRedisStoreMockRecorder
}

// MockRedisStoreMockRecorder is the mock recorder for MockRedisStore.
type MockRedisStoreMockRecorder struct {
	mock *MockRedisStore
}

// NewMockRedisStore creates a new mock instance.
func NewMockRedisStore(ctrl *gomock.Controller) *MockRedisStore {
	mock := &MockRedisStore{ctrl: ctrl}
	mock.recorder = &MockRedisStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisStore) EXPECT() *MockRedisStoreMockRecorder {
	return m.recorder
}

// DeleteSession mocks base method.
func (m *MockRedisStore) DeleteSession(session string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockRedisStoreMockRecorder) DeleteSession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockRedisStore)(nil).DeleteSession), session)
}

// GetUserId mocks base method.
func (m *MockRedisStore) GetUserId(session string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserId", session)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserId indicates an expected call of GetUserId.
func (mr *MockRedisStoreMockRecorder) GetUserId(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserId", reflect.TypeOf((*MockRedisStore)(nil).GetUserId), session)
}

// StoreSession mocks base method.
func (m *MockRedisStore) StoreSession(userID int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreSession", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreSession indicates an expected call of StoreSession.
func (mr *MockRedisStoreMockRecorder) StoreSession(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSession", reflect.TypeOf((*MockRedisStore)(nil).StoreSession), userID)
}

// MockImageStorage is a mock of ImageStorage interface.
type MockImageStorage struct {
	ctrl     *gomock.Controller
	recorder *MockImageStorageMockRecorder
}

// MockImageStorageMockRecorder is the mock recorder for MockImageStorage.
type MockImageStorageMockRecorder struct {
	mock *MockImageStorage
}

// NewMockImageStorage creates a new mock instance.
func NewMockImageStorage(ctrl *gomock.Controller) *MockImageStorage {
	mock := &MockImageStorage{ctrl: ctrl}
	mock.recorder = &MockImageStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageStorage) EXPECT() *MockImageStorageMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockImageStorage) DeleteFile(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockImageStorageMockRecorder) DeleteFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockImageStorage)(nil).DeleteFile), arg0)
}

// UploadFile mocks base method.
func (m *MockImageStorage) UploadFile(input user.UploadInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockImageStorageMockRecorder) UploadFile(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockImageStorage)(nil).UploadFile), input)
}
