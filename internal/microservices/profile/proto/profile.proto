syntax = "proto3";

option go_package = "/";

//protoc --go_out=. --go-grpc_opt=require_unimplemented_servers=false --go-grpc_out=. *.proto

package profile;

message ProfileData {
  string Name = 1;
  string Email = 2;
  string Avatar = 3;
  string date = 4;
}

message EditProfileData {
  int64 ID = 1;
  string Name = 2;
  string Password = 3;
}

message EditAvatarData {
  int64 ID = 1;
  string Avatar = 2;
}

message UploadInputFile {
  int64 ID = 1;
  bytes File = 2;
  int64 Size = 3;
  string ContentType = 4;
}

message FileName {
  string name = 1;
}

message UserID {
  int64 ID = 1;
}

message LikeData {
  int64 userID = 1;
  int64 movieID = 2;
}

message Favorites {
  repeated int64 id = 1 [json_name="id"];
}

message Token {
  string token = 1;
}

message CheckTokenData {
  string token = 1;
  int64 id = 2;
}

message SubscribeData {
  string token = 1;
  float amount = 2;
}

message Subscription {
  bool subscription = 1;
}

message Empty { }

service Profile {
  rpc GetUserProfile(UserID) returns(ProfileData) {}
  rpc EditProfile(EditProfileData) returns(Empty) {}
  rpc EditAvatar(EditAvatarData) returns(Empty) {}
  rpc UploadAvatar(UploadInputFile) returns(FileName) {}
  rpc GetAvatar(UserID) returns(FileName) {}
  rpc AddLike(LikeData) returns(Empty) {}
  rpc RemoveLike(LikeData) returns(Empty) {}
  rpc GetFavorites(UserID) returns(Favorites) {}
  rpc GetPaymentsToken(UserID) returns(Token) {}
  rpc CheckPaymentsToken(CheckTokenData) returns(Empty) {}
  rpc CheckToken(Token) returns(Empty) {}
  rpc CreatePayment(CheckTokenData) returns(Empty) {}
  rpc CreateSubscribe(SubscribeData) returns(Empty) {}
  rpc IsSubscription(UserID) returns(Empty) {}
}
