// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"myapp/internal/microservices/movie"
	"myapp/internal/microservices/movie/proto"
	"sync"
)

// Ensure, that MockMovieStorage does implement movie.Storage.
// If this is not the case, regenerate this file with moq.
var _ movie.Storage = &MockMovieStorage{}

// MockMovieStorage is a mock implementation of movie.Storage.
//
// 	func TestSomethingThatUsesStorage(t *testing.T) {
//
// 		// make and configure a mocked movie.Storage
// 		mockedStorage := &MockMovieStorage{
// 			AddMovieRatingFunc: func(options *proto.AddRatingOptions) error {
// 				panic("mock out the AddMovieRating method")
// 			},
// 			ChangeMovieRatingFunc: func(options *proto.AddRatingOptions) error {
// 				panic("mock out the ChangeMovieRating method")
// 			},
// 			CheckRatingExistsFunc: func(options *proto.AddRatingOptions) (*movie.CheckRatingExistsAnswer, error) {
// 				panic("mock out the CheckRatingExists method")
// 			},
// 			GetAllMoviesFunc: func(limit int, offset int) ([]*proto.Movie, error) {
// 				panic("mock out the GetAllMovies method")
// 			},
// 			GetMovieRatingFunc: func(movieID int) (*movie.GetMovieRatingAnswer, error) {
// 				panic("mock out the GetMovieRating method")
// 			},
// 			GetOneFunc: func(id int) (*proto.Movie, error) {
// 				panic("mock out the GetOne method")
// 			},
// 			GetRandomMovieFunc: func() (*proto.MainMovie, error) {
// 				panic("mock out the GetRandomMovie method")
// 			},
// 			GetSeasonsAndEpisodesFunc: func(seriesID int) ([]*proto.Season, error) {
// 				panic("mock out the GetSeasonsAndEpisodes method")
// 			},
// 			RemoveMovieRatingFunc: func(options *proto.AddRatingOptions) error {
// 				panic("mock out the RemoveMovieRating method")
// 			},
// 		}
//
// 		// use mockedStorage in code that requires movie.Storage
// 		// and then make assertions.
//
// 	}
type MockMovieStorage struct {
	// AddMovieRatingFunc mocks the AddMovieRating method.
	AddMovieRatingFunc func(options *proto.AddRatingOptions) error

	// ChangeMovieRatingFunc mocks the ChangeMovieRating method.
	ChangeMovieRatingFunc func(options *proto.AddRatingOptions) error

	// CheckRatingExistsFunc mocks the CheckRatingExists method.
	CheckRatingExistsFunc func(options *proto.AddRatingOptions) (*movie.CheckRatingExistsAnswer, error)

	// GetAllMoviesFunc mocks the GetAllMovies method.
	GetAllMoviesFunc func(limit int, offset int) ([]*proto.Movie, error)

	// GetMovieRatingFunc mocks the GetMovieRating method.
	GetMovieRatingFunc func(movieID int) (*movie.GetMovieRatingAnswer, error)

	// GetOneFunc mocks the GetOne method.
	GetOneFunc func(id int) (*proto.Movie, error)

	// GetRandomMovieFunc mocks the GetRandomMovie method.
	GetRandomMovieFunc func() (*proto.MainMovie, error)

	// GetSeasonsAndEpisodesFunc mocks the GetSeasonsAndEpisodes method.
	GetSeasonsAndEpisodesFunc func(seriesID int) ([]*proto.Season, error)

	// RemoveMovieRatingFunc mocks the RemoveMovieRating method.
	RemoveMovieRatingFunc func(options *proto.AddRatingOptions) error

	// calls tracks calls to the methods.
	calls struct {
		// AddMovieRating holds details about calls to the AddMovieRating method.
		AddMovieRating []struct {
			// Options is the options argument value.
			Options *proto.AddRatingOptions
		}
		// ChangeMovieRating holds details about calls to the ChangeMovieRating method.
		ChangeMovieRating []struct {
			// Options is the options argument value.
			Options *proto.AddRatingOptions
		}
		// CheckRatingExists holds details about calls to the CheckRatingExists method.
		CheckRatingExists []struct {
			// Options is the options argument value.
			Options *proto.AddRatingOptions
		}
		// GetAllMovies holds details about calls to the GetAllMovies method.
		GetAllMovies []struct {
			// Limit is the limit argument value.
			Limit int
			// Offset is the offset argument value.
			Offset int
		}
		// GetMovieRating holds details about calls to the GetMovieRating method.
		GetMovieRating []struct {
			// MovieID is the movieID argument value.
			MovieID int
		}
		// GetOne holds details about calls to the GetOne method.
		GetOne []struct {
			// ID is the id argument value.
			ID int
		}
		// GetRandomMovie holds details about calls to the GetRandomMovie method.
		GetRandomMovie []struct {
		}
		// GetSeasonsAndEpisodes holds details about calls to the GetSeasonsAndEpisodes method.
		GetSeasonsAndEpisodes []struct {
			// SeriesID is the seriesID argument value.
			SeriesID int
		}
		// RemoveMovieRating holds details about calls to the RemoveMovieRating method.
		RemoveMovieRating []struct {
			// Options is the options argument value.
			Options *proto.AddRatingOptions
		}
	}
	lockAddMovieRating        sync.RWMutex
	lockChangeMovieRating     sync.RWMutex
	lockCheckRatingExists     sync.RWMutex
	lockGetAllMovies          sync.RWMutex
	lockGetMovieRating        sync.RWMutex
	lockGetOne                sync.RWMutex
	lockGetRandomMovie        sync.RWMutex
	lockGetSeasonsAndEpisodes sync.RWMutex
	lockRemoveMovieRating     sync.RWMutex
}

// AddMovieRating calls AddMovieRatingFunc.
func (mock *MockMovieStorage) AddMovieRating(options *proto.AddRatingOptions) error {
	if mock.AddMovieRatingFunc == nil {
		panic("MockMovieStorage.AddMovieRatingFunc: method is nil but Storage.AddMovieRating was just called")
	}
	callInfo := struct {
		Options *proto.AddRatingOptions
	}{
		Options: options,
	}
	mock.lockAddMovieRating.Lock()
	mock.calls.AddMovieRating = append(mock.calls.AddMovieRating, callInfo)
	mock.lockAddMovieRating.Unlock()
	return mock.AddMovieRatingFunc(options)
}

// AddMovieRatingCalls gets all the calls that were made to AddMovieRating.
// Check the length with:
//     len(mockedStorage.AddMovieRatingCalls())
func (mock *MockMovieStorage) AddMovieRatingCalls() []struct {
	Options *proto.AddRatingOptions
} {
	var calls []struct {
		Options *proto.AddRatingOptions
	}
	mock.lockAddMovieRating.RLock()
	calls = mock.calls.AddMovieRating
	mock.lockAddMovieRating.RUnlock()
	return calls
}

// ChangeMovieRating calls ChangeMovieRatingFunc.
func (mock *MockMovieStorage) ChangeMovieRating(options *proto.AddRatingOptions) error {
	if mock.ChangeMovieRatingFunc == nil {
		panic("MockMovieStorage.ChangeMovieRatingFunc: method is nil but Storage.ChangeMovieRating was just called")
	}
	callInfo := struct {
		Options *proto.AddRatingOptions
	}{
		Options: options,
	}
	mock.lockChangeMovieRating.Lock()
	mock.calls.ChangeMovieRating = append(mock.calls.ChangeMovieRating, callInfo)
	mock.lockChangeMovieRating.Unlock()
	return mock.ChangeMovieRatingFunc(options)
}

// ChangeMovieRatingCalls gets all the calls that were made to ChangeMovieRating.
// Check the length with:
//     len(mockedStorage.ChangeMovieRatingCalls())
func (mock *MockMovieStorage) ChangeMovieRatingCalls() []struct {
	Options *proto.AddRatingOptions
} {
	var calls []struct {
		Options *proto.AddRatingOptions
	}
	mock.lockChangeMovieRating.RLock()
	calls = mock.calls.ChangeMovieRating
	mock.lockChangeMovieRating.RUnlock()
	return calls
}

// CheckRatingExists calls CheckRatingExistsFunc.
func (mock *MockMovieStorage) CheckRatingExists(options *proto.AddRatingOptions) (*movie.CheckRatingExistsAnswer, error) {
	if mock.CheckRatingExistsFunc == nil {
		panic("MockMovieStorage.CheckRatingExistsFunc: method is nil but Storage.CheckRatingExists was just called")
	}
	callInfo := struct {
		Options *proto.AddRatingOptions
	}{
		Options: options,
	}
	mock.lockCheckRatingExists.Lock()
	mock.calls.CheckRatingExists = append(mock.calls.CheckRatingExists, callInfo)
	mock.lockCheckRatingExists.Unlock()
	return mock.CheckRatingExistsFunc(options)
}

// CheckRatingExistsCalls gets all the calls that were made to CheckRatingExists.
// Check the length with:
//     len(mockedStorage.CheckRatingExistsCalls())
func (mock *MockMovieStorage) CheckRatingExistsCalls() []struct {
	Options *proto.AddRatingOptions
} {
	var calls []struct {
		Options *proto.AddRatingOptions
	}
	mock.lockCheckRatingExists.RLock()
	calls = mock.calls.CheckRatingExists
	mock.lockCheckRatingExists.RUnlock()
	return calls
}

// GetAllMovies calls GetAllMoviesFunc.
func (mock *MockMovieStorage) GetAllMovies(limit int, offset int) ([]*proto.Movie, error) {
	if mock.GetAllMoviesFunc == nil {
		panic("MockMovieStorage.GetAllMoviesFunc: method is nil but Storage.GetAllMovies was just called")
	}
	callInfo := struct {
		Limit  int
		Offset int
	}{
		Limit:  limit,
		Offset: offset,
	}
	mock.lockGetAllMovies.Lock()
	mock.calls.GetAllMovies = append(mock.calls.GetAllMovies, callInfo)
	mock.lockGetAllMovies.Unlock()
	return mock.GetAllMoviesFunc(limit, offset)
}

// GetAllMoviesCalls gets all the calls that were made to GetAllMovies.
// Check the length with:
//     len(mockedStorage.GetAllMoviesCalls())
func (mock *MockMovieStorage) GetAllMoviesCalls() []struct {
	Limit  int
	Offset int
} {
	var calls []struct {
		Limit  int
		Offset int
	}
	mock.lockGetAllMovies.RLock()
	calls = mock.calls.GetAllMovies
	mock.lockGetAllMovies.RUnlock()
	return calls
}

// GetMovieRating calls GetMovieRatingFunc.
func (mock *MockMovieStorage) GetMovieRating(movieID int) (*movie.GetMovieRatingAnswer, error) {
	if mock.GetMovieRatingFunc == nil {
		panic("MockMovieStorage.GetMovieRatingFunc: method is nil but Storage.GetMovieRating was just called")
	}
	callInfo := struct {
		MovieID int
	}{
		MovieID: movieID,
	}
	mock.lockGetMovieRating.Lock()
	mock.calls.GetMovieRating = append(mock.calls.GetMovieRating, callInfo)
	mock.lockGetMovieRating.Unlock()
	return mock.GetMovieRatingFunc(movieID)
}

// GetMovieRatingCalls gets all the calls that were made to GetMovieRating.
// Check the length with:
//     len(mockedStorage.GetMovieRatingCalls())
func (mock *MockMovieStorage) GetMovieRatingCalls() []struct {
	MovieID int
} {
	var calls []struct {
		MovieID int
	}
	mock.lockGetMovieRating.RLock()
	calls = mock.calls.GetMovieRating
	mock.lockGetMovieRating.RUnlock()
	return calls
}

// GetOne calls GetOneFunc.
func (mock *MockMovieStorage) GetOne(id int) (*proto.Movie, error) {
	if mock.GetOneFunc == nil {
		panic("MockMovieStorage.GetOneFunc: method is nil but Storage.GetOne was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockGetOne.Lock()
	mock.calls.GetOne = append(mock.calls.GetOne, callInfo)
	mock.lockGetOne.Unlock()
	return mock.GetOneFunc(id)
}

// GetOneCalls gets all the calls that were made to GetOne.
// Check the length with:
//     len(mockedStorage.GetOneCalls())
func (mock *MockMovieStorage) GetOneCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockGetOne.RLock()
	calls = mock.calls.GetOne
	mock.lockGetOne.RUnlock()
	return calls
}

// GetRandomMovie calls GetRandomMovieFunc.
func (mock *MockMovieStorage) GetRandomMovie() (*proto.MainMovie, error) {
	if mock.GetRandomMovieFunc == nil {
		panic("MockMovieStorage.GetRandomMovieFunc: method is nil but Storage.GetRandomMovie was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetRandomMovie.Lock()
	mock.calls.GetRandomMovie = append(mock.calls.GetRandomMovie, callInfo)
	mock.lockGetRandomMovie.Unlock()
	return mock.GetRandomMovieFunc()
}

// GetRandomMovieCalls gets all the calls that were made to GetRandomMovie.
// Check the length with:
//     len(mockedStorage.GetRandomMovieCalls())
func (mock *MockMovieStorage) GetRandomMovieCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetRandomMovie.RLock()
	calls = mock.calls.GetRandomMovie
	mock.lockGetRandomMovie.RUnlock()
	return calls
}

// GetSeasonsAndEpisodes calls GetSeasonsAndEpisodesFunc.
func (mock *MockMovieStorage) GetSeasonsAndEpisodes(seriesID int) ([]*proto.Season, error) {
	if mock.GetSeasonsAndEpisodesFunc == nil {
		panic("MockMovieStorage.GetSeasonsAndEpisodesFunc: method is nil but Storage.GetSeasonsAndEpisodes was just called")
	}
	callInfo := struct {
		SeriesID int
	}{
		SeriesID: seriesID,
	}
	mock.lockGetSeasonsAndEpisodes.Lock()
	mock.calls.GetSeasonsAndEpisodes = append(mock.calls.GetSeasonsAndEpisodes, callInfo)
	mock.lockGetSeasonsAndEpisodes.Unlock()
	return mock.GetSeasonsAndEpisodesFunc(seriesID)
}

// GetSeasonsAndEpisodesCalls gets all the calls that were made to GetSeasonsAndEpisodes.
// Check the length with:
//     len(mockedStorage.GetSeasonsAndEpisodesCalls())
func (mock *MockMovieStorage) GetSeasonsAndEpisodesCalls() []struct {
	SeriesID int
} {
	var calls []struct {
		SeriesID int
	}
	mock.lockGetSeasonsAndEpisodes.RLock()
	calls = mock.calls.GetSeasonsAndEpisodes
	mock.lockGetSeasonsAndEpisodes.RUnlock()
	return calls
}

// RemoveMovieRating calls RemoveMovieRatingFunc.
func (mock *MockMovieStorage) RemoveMovieRating(options *proto.AddRatingOptions) error {
	if mock.RemoveMovieRatingFunc == nil {
		panic("MockMovieStorage.RemoveMovieRatingFunc: method is nil but Storage.RemoveMovieRating was just called")
	}
	callInfo := struct {
		Options *proto.AddRatingOptions
	}{
		Options: options,
	}
	mock.lockRemoveMovieRating.Lock()
	mock.calls.RemoveMovieRating = append(mock.calls.RemoveMovieRating, callInfo)
	mock.lockRemoveMovieRating.Unlock()
	return mock.RemoveMovieRatingFunc(options)
}

// RemoveMovieRatingCalls gets all the calls that were made to RemoveMovieRating.
// Check the length with:
//     len(mockedStorage.RemoveMovieRatingCalls())
func (mock *MockMovieStorage) RemoveMovieRatingCalls() []struct {
	Options *proto.AddRatingOptions
} {
	var calls []struct {
		Options *proto.AddRatingOptions
	}
	mock.lockRemoveMovieRating.RLock()
	calls = mock.calls.RemoveMovieRating
	mock.lockRemoveMovieRating.RUnlock()
	return calls
}
