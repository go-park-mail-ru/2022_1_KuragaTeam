// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package usecase

import (
	context "context"
	"myapp/internal/microservices/compilations/proto"
	sync "sync"
)

// Ensure, that MockMovieCompilationsServer does implement proto.MovieCompilationsServer.
// If this is not the case, regenerate this file with moq.
var _ proto.MovieCompilationsServer = &MockMovieCompilationsServer{}

// MockMovieCompilationsServer is a mock implementation of proto.MovieCompilationsServer.
//
// 	func TestSomethingThatUsesMovieCompilationsServer(t *testing.T) {
//
// 		// make and configure a mocked proto.MovieCompilationsServer
// 		mockedMovieCompilationsServer := &MockMovieCompilationsServer{
// 			FindFunc: func(contextMoqParam context.Context, searchText *proto.SearchText) (*proto.SearchCompilation, error) {
// 				panic("mock out the Find method")
// 			},
// 			GetAllMoviesFunc: func(contextMoqParam context.Context, getCompilationOptions *proto.GetCompilationOptions) (*proto.MovieCompilation, error) {
// 				panic("mock out the GetAllMovies method")
// 			},
// 			GetAllSeriesFunc: func(contextMoqParam context.Context, getCompilationOptions *proto.GetCompilationOptions) (*proto.MovieCompilation, error) {
// 				panic("mock out the GetAllSeries method")
// 			},
// 			GetByCountryFunc: func(contextMoqParam context.Context, getByIDOptions *proto.GetByIDOptions) (*proto.MovieCompilation, error) {
// 				panic("mock out the GetByCountry method")
// 			},
// 			GetByGenreFunc: func(contextMoqParam context.Context, getByIDOptions *proto.GetByIDOptions) (*proto.MovieCompilation, error) {
// 				panic("mock out the GetByGenre method")
// 			},
// 			GetByMovieFunc: func(contextMoqParam context.Context, getByIDOptions *proto.GetByIDOptions) (*proto.MovieCompilation, error) {
// 				panic("mock out the GetByMovie method")
// 			},
// 			GetByPersonFunc: func(contextMoqParam context.Context, getByIDOptions *proto.GetByIDOptions) (*proto.MovieCompilation, error) {
// 				panic("mock out the GetByPerson method")
// 			},
// 			GetFavoritesFunc: func(contextMoqParam context.Context, getFavoritesOptions *proto.GetFavoritesOptions) (*proto.MovieCompilationsArr, error) {
// 				panic("mock out the GetFavorites method")
// 			},
// 			GetFavoritesFilmsFunc: func(contextMoqParam context.Context, getFavoritesOptions *proto.GetFavoritesOptions) (*proto.MovieCompilation, error) {
// 				panic("mock out the GetFavoritesFilms method")
// 			},
// 			GetFavoritesSeriesFunc: func(contextMoqParam context.Context, getFavoritesOptions *proto.GetFavoritesOptions) (*proto.MovieCompilation, error) {
// 				panic("mock out the GetFavoritesSeries method")
// 			},
// 			GetMainCompilationsFunc: func(contextMoqParam context.Context, getMainCompilationsOptions *proto.GetMainCompilationsOptions) (*proto.MovieCompilationsArr, error) {
// 				panic("mock out the GetMainCompilations method")
// 			},
// 			GetTopFunc: func(contextMoqParam context.Context, getCompilationOptions *proto.GetCompilationOptions) (*proto.MovieCompilation, error) {
// 				panic("mock out the GetTop method")
// 			},
// 			GetTopByYearFunc: func(contextMoqParam context.Context, getByIDOptions *proto.GetByIDOptions) (*proto.MovieCompilation, error) {
// 				panic("mock out the GetTopByYear method")
// 			},
// 		}
//
// 		// use mockedMovieCompilationsServer in code that requires proto.MovieCompilationsServer
// 		// and then make assertions.
//
// 	}
type MockMovieCompilationsServer struct {
	// FindFunc mocks the Find method.
	FindFunc func(contextMoqParam context.Context, searchText *proto.SearchText) (*proto.SearchCompilation, error)

	// GetAllMoviesFunc mocks the GetAllMovies method.
	GetAllMoviesFunc func(contextMoqParam context.Context, getCompilationOptions *proto.GetCompilationOptions) (*proto.MovieCompilation, error)

	// GetAllSeriesFunc mocks the GetAllSeries method.
	GetAllSeriesFunc func(contextMoqParam context.Context, getCompilationOptions *proto.GetCompilationOptions) (*proto.MovieCompilation, error)

	// GetByCountryFunc mocks the GetByCountry method.
	GetByCountryFunc func(contextMoqParam context.Context, getByIDOptions *proto.GetByIDOptions) (*proto.MovieCompilation, error)

	// GetByGenreFunc mocks the GetByGenre method.
	GetByGenreFunc func(contextMoqParam context.Context, getByIDOptions *proto.GetByIDOptions) (*proto.MovieCompilation, error)

	// GetByMovieFunc mocks the GetByMovie method.
	GetByMovieFunc func(contextMoqParam context.Context, getByIDOptions *proto.GetByIDOptions) (*proto.MovieCompilation, error)

	// GetByPersonFunc mocks the GetByPerson method.
	GetByPersonFunc func(contextMoqParam context.Context, getByIDOptions *proto.GetByIDOptions) (*proto.MovieCompilation, error)

	// GetFavoritesFunc mocks the GetFavorites method.
	GetFavoritesFunc func(contextMoqParam context.Context, getFavoritesOptions *proto.GetFavoritesOptions) (*proto.MovieCompilationsArr, error)

	// GetFavoritesFilmsFunc mocks the GetFavoritesFilms method.
	GetFavoritesFilmsFunc func(contextMoqParam context.Context, getFavoritesOptions *proto.GetFavoritesOptions) (*proto.MovieCompilation, error)

	// GetFavoritesSeriesFunc mocks the GetFavoritesSeries method.
	GetFavoritesSeriesFunc func(contextMoqParam context.Context, getFavoritesOptions *proto.GetFavoritesOptions) (*proto.MovieCompilation, error)

	// GetMainCompilationsFunc mocks the GetMainCompilations method.
	GetMainCompilationsFunc func(contextMoqParam context.Context, getMainCompilationsOptions *proto.GetMainCompilationsOptions) (*proto.MovieCompilationsArr, error)

	// GetTopFunc mocks the GetTop method.
	GetTopFunc func(contextMoqParam context.Context, getCompilationOptions *proto.GetCompilationOptions) (*proto.MovieCompilation, error)

	// GetTopByYearFunc mocks the GetTopByYear method.
	GetTopByYearFunc func(contextMoqParam context.Context, getByIDOptions *proto.GetByIDOptions) (*proto.MovieCompilation, error)

	// calls tracks calls to the methods.
	calls struct {
		// Find holds details about calls to the Find method.
		Find []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// SearchText is the searchText argument value.
			SearchText *proto.SearchText
		}
		// GetAllMovies holds details about calls to the GetAllMovies method.
		GetAllMovies []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetCompilationOptions is the getCompilationOptions argument value.
			GetCompilationOptions *proto.GetCompilationOptions
		}
		// GetAllSeries holds details about calls to the GetAllSeries method.
		GetAllSeries []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetCompilationOptions is the getCompilationOptions argument value.
			GetCompilationOptions *proto.GetCompilationOptions
		}
		// GetByCountry holds details about calls to the GetByCountry method.
		GetByCountry []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetByIDOptions is the getByIDOptions argument value.
			GetByIDOptions *proto.GetByIDOptions
		}
		// GetByGenre holds details about calls to the GetByGenre method.
		GetByGenre []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetByIDOptions is the getByIDOptions argument value.
			GetByIDOptions *proto.GetByIDOptions
		}
		// GetByMovie holds details about calls to the GetByMovie method.
		GetByMovie []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetByIDOptions is the getByIDOptions argument value.
			GetByIDOptions *proto.GetByIDOptions
		}
		// GetByPerson holds details about calls to the GetByPerson method.
		GetByPerson []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetByIDOptions is the getByIDOptions argument value.
			GetByIDOptions *proto.GetByIDOptions
		}
		// GetFavorites holds details about calls to the GetFavorites method.
		GetFavorites []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetFavoritesOptions is the getFavoritesOptions argument value.
			GetFavoritesOptions *proto.GetFavoritesOptions
		}
		// GetFavoritesFilms holds details about calls to the GetFavoritesFilms method.
		GetFavoritesFilms []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetFavoritesOptions is the getFavoritesOptions argument value.
			GetFavoritesOptions *proto.GetFavoritesOptions
		}
		// GetFavoritesSeries holds details about calls to the GetFavoritesSeries method.
		GetFavoritesSeries []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetFavoritesOptions is the getFavoritesOptions argument value.
			GetFavoritesOptions *proto.GetFavoritesOptions
		}
		// GetMainCompilations holds details about calls to the GetMainCompilations method.
		GetMainCompilations []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetMainCompilationsOptions is the getMainCompilationsOptions argument value.
			GetMainCompilationsOptions *proto.GetMainCompilationsOptions
		}
		// GetTop holds details about calls to the GetTop method.
		GetTop []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetCompilationOptions is the getCompilationOptions argument value.
			GetCompilationOptions *proto.GetCompilationOptions
		}
		// GetTopByYear holds details about calls to the GetTopByYear method.
		GetTopByYear []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetByIDOptions is the getByIDOptions argument value.
			GetByIDOptions *proto.GetByIDOptions
		}
	}
	lockFind                sync.RWMutex
	lockGetAllMovies        sync.RWMutex
	lockGetAllSeries        sync.RWMutex
	lockGetByCountry        sync.RWMutex
	lockGetByGenre          sync.RWMutex
	lockGetByMovie          sync.RWMutex
	lockGetByPerson         sync.RWMutex
	lockGetFavorites        sync.RWMutex
	lockGetFavoritesFilms   sync.RWMutex
	lockGetFavoritesSeries  sync.RWMutex
	lockGetMainCompilations sync.RWMutex
	lockGetTop              sync.RWMutex
	lockGetTopByYear        sync.RWMutex
}

// Find calls FindFunc.
func (mock *MockMovieCompilationsServer) Find(contextMoqParam context.Context, searchText *proto.SearchText) (*proto.SearchCompilation, error) {
	if mock.FindFunc == nil {
		panic("MockMovieCompilationsServer.FindFunc: method is nil but MovieCompilationsServer.Find was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		SearchText      *proto.SearchText
	}{
		ContextMoqParam: contextMoqParam,
		SearchText:      searchText,
	}
	mock.lockFind.Lock()
	mock.calls.Find = append(mock.calls.Find, callInfo)
	mock.lockFind.Unlock()
	return mock.FindFunc(contextMoqParam, searchText)
}

// FindCalls gets all the calls that were made to Find.
// Check the length with:
//     len(mockedMovieCompilationsServer.FindCalls())
func (mock *MockMovieCompilationsServer) FindCalls() []struct {
	ContextMoqParam context.Context
	SearchText      *proto.SearchText
} {
	var calls []struct {
		ContextMoqParam context.Context
		SearchText      *proto.SearchText
	}
	mock.lockFind.RLock()
	calls = mock.calls.Find
	mock.lockFind.RUnlock()
	return calls
}

// GetAllMovies calls GetAllMoviesFunc.
func (mock *MockMovieCompilationsServer) GetAllMovies(contextMoqParam context.Context, getCompilationOptions *proto.GetCompilationOptions) (*proto.MovieCompilation, error) {
	if mock.GetAllMoviesFunc == nil {
		panic("MockMovieCompilationsServer.GetAllMoviesFunc: method is nil but MovieCompilationsServer.GetAllMovies was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		GetCompilationOptions *proto.GetCompilationOptions
	}{
		ContextMoqParam:       contextMoqParam,
		GetCompilationOptions: getCompilationOptions,
	}
	mock.lockGetAllMovies.Lock()
	mock.calls.GetAllMovies = append(mock.calls.GetAllMovies, callInfo)
	mock.lockGetAllMovies.Unlock()
	return mock.GetAllMoviesFunc(contextMoqParam, getCompilationOptions)
}

// GetAllMoviesCalls gets all the calls that were made to GetAllMovies.
// Check the length with:
//     len(mockedMovieCompilationsServer.GetAllMoviesCalls())
func (mock *MockMovieCompilationsServer) GetAllMoviesCalls() []struct {
	ContextMoqParam       context.Context
	GetCompilationOptions *proto.GetCompilationOptions
} {
	var calls []struct {
		ContextMoqParam       context.Context
		GetCompilationOptions *proto.GetCompilationOptions
	}
	mock.lockGetAllMovies.RLock()
	calls = mock.calls.GetAllMovies
	mock.lockGetAllMovies.RUnlock()
	return calls
}

// GetAllSeries calls GetAllSeriesFunc.
func (mock *MockMovieCompilationsServer) GetAllSeries(contextMoqParam context.Context, getCompilationOptions *proto.GetCompilationOptions) (*proto.MovieCompilation, error) {
	if mock.GetAllSeriesFunc == nil {
		panic("MockMovieCompilationsServer.GetAllSeriesFunc: method is nil but MovieCompilationsServer.GetAllSeries was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		GetCompilationOptions *proto.GetCompilationOptions
	}{
		ContextMoqParam:       contextMoqParam,
		GetCompilationOptions: getCompilationOptions,
	}
	mock.lockGetAllSeries.Lock()
	mock.calls.GetAllSeries = append(mock.calls.GetAllSeries, callInfo)
	mock.lockGetAllSeries.Unlock()
	return mock.GetAllSeriesFunc(contextMoqParam, getCompilationOptions)
}

// GetAllSeriesCalls gets all the calls that were made to GetAllSeries.
// Check the length with:
//     len(mockedMovieCompilationsServer.GetAllSeriesCalls())
func (mock *MockMovieCompilationsServer) GetAllSeriesCalls() []struct {
	ContextMoqParam       context.Context
	GetCompilationOptions *proto.GetCompilationOptions
} {
	var calls []struct {
		ContextMoqParam       context.Context
		GetCompilationOptions *proto.GetCompilationOptions
	}
	mock.lockGetAllSeries.RLock()
	calls = mock.calls.GetAllSeries
	mock.lockGetAllSeries.RUnlock()
	return calls
}

// GetByCountry calls GetByCountryFunc.
func (mock *MockMovieCompilationsServer) GetByCountry(contextMoqParam context.Context, getByIDOptions *proto.GetByIDOptions) (*proto.MovieCompilation, error) {
	if mock.GetByCountryFunc == nil {
		panic("MockMovieCompilationsServer.GetByCountryFunc: method is nil but MovieCompilationsServer.GetByCountry was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		GetByIDOptions  *proto.GetByIDOptions
	}{
		ContextMoqParam: contextMoqParam,
		GetByIDOptions:  getByIDOptions,
	}
	mock.lockGetByCountry.Lock()
	mock.calls.GetByCountry = append(mock.calls.GetByCountry, callInfo)
	mock.lockGetByCountry.Unlock()
	return mock.GetByCountryFunc(contextMoqParam, getByIDOptions)
}

// GetByCountryCalls gets all the calls that were made to GetByCountry.
// Check the length with:
//     len(mockedMovieCompilationsServer.GetByCountryCalls())
func (mock *MockMovieCompilationsServer) GetByCountryCalls() []struct {
	ContextMoqParam context.Context
	GetByIDOptions  *proto.GetByIDOptions
} {
	var calls []struct {
		ContextMoqParam context.Context
		GetByIDOptions  *proto.GetByIDOptions
	}
	mock.lockGetByCountry.RLock()
	calls = mock.calls.GetByCountry
	mock.lockGetByCountry.RUnlock()
	return calls
}

// GetByGenre calls GetByGenreFunc.
func (mock *MockMovieCompilationsServer) GetByGenre(contextMoqParam context.Context, getByIDOptions *proto.GetByIDOptions) (*proto.MovieCompilation, error) {
	if mock.GetByGenreFunc == nil {
		panic("MockMovieCompilationsServer.GetByGenreFunc: method is nil but MovieCompilationsServer.GetByGenre was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		GetByIDOptions  *proto.GetByIDOptions
	}{
		ContextMoqParam: contextMoqParam,
		GetByIDOptions:  getByIDOptions,
	}
	mock.lockGetByGenre.Lock()
	mock.calls.GetByGenre = append(mock.calls.GetByGenre, callInfo)
	mock.lockGetByGenre.Unlock()
	return mock.GetByGenreFunc(contextMoqParam, getByIDOptions)
}

// GetByGenreCalls gets all the calls that were made to GetByGenre.
// Check the length with:
//     len(mockedMovieCompilationsServer.GetByGenreCalls())
func (mock *MockMovieCompilationsServer) GetByGenreCalls() []struct {
	ContextMoqParam context.Context
	GetByIDOptions  *proto.GetByIDOptions
} {
	var calls []struct {
		ContextMoqParam context.Context
		GetByIDOptions  *proto.GetByIDOptions
	}
	mock.lockGetByGenre.RLock()
	calls = mock.calls.GetByGenre
	mock.lockGetByGenre.RUnlock()
	return calls
}

// GetByMovie calls GetByMovieFunc.
func (mock *MockMovieCompilationsServer) GetByMovie(contextMoqParam context.Context, getByIDOptions *proto.GetByIDOptions) (*proto.MovieCompilation, error) {
	if mock.GetByMovieFunc == nil {
		panic("MockMovieCompilationsServer.GetByMovieFunc: method is nil but MovieCompilationsServer.GetByMovie was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		GetByIDOptions  *proto.GetByIDOptions
	}{
		ContextMoqParam: contextMoqParam,
		GetByIDOptions:  getByIDOptions,
	}
	mock.lockGetByMovie.Lock()
	mock.calls.GetByMovie = append(mock.calls.GetByMovie, callInfo)
	mock.lockGetByMovie.Unlock()
	return mock.GetByMovieFunc(contextMoqParam, getByIDOptions)
}

// GetByMovieCalls gets all the calls that were made to GetByMovie.
// Check the length with:
//     len(mockedMovieCompilationsServer.GetByMovieCalls())
func (mock *MockMovieCompilationsServer) GetByMovieCalls() []struct {
	ContextMoqParam context.Context
	GetByIDOptions  *proto.GetByIDOptions
} {
	var calls []struct {
		ContextMoqParam context.Context
		GetByIDOptions  *proto.GetByIDOptions
	}
	mock.lockGetByMovie.RLock()
	calls = mock.calls.GetByMovie
	mock.lockGetByMovie.RUnlock()
	return calls
}

// GetByPerson calls GetByPersonFunc.
func (mock *MockMovieCompilationsServer) GetByPerson(contextMoqParam context.Context, getByIDOptions *proto.GetByIDOptions) (*proto.MovieCompilation, error) {
	if mock.GetByPersonFunc == nil {
		panic("MockMovieCompilationsServer.GetByPersonFunc: method is nil but MovieCompilationsServer.GetByPerson was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		GetByIDOptions  *proto.GetByIDOptions
	}{
		ContextMoqParam: contextMoqParam,
		GetByIDOptions:  getByIDOptions,
	}
	mock.lockGetByPerson.Lock()
	mock.calls.GetByPerson = append(mock.calls.GetByPerson, callInfo)
	mock.lockGetByPerson.Unlock()
	return mock.GetByPersonFunc(contextMoqParam, getByIDOptions)
}

// GetByPersonCalls gets all the calls that were made to GetByPerson.
// Check the length with:
//     len(mockedMovieCompilationsServer.GetByPersonCalls())
func (mock *MockMovieCompilationsServer) GetByPersonCalls() []struct {
	ContextMoqParam context.Context
	GetByIDOptions  *proto.GetByIDOptions
} {
	var calls []struct {
		ContextMoqParam context.Context
		GetByIDOptions  *proto.GetByIDOptions
	}
	mock.lockGetByPerson.RLock()
	calls = mock.calls.GetByPerson
	mock.lockGetByPerson.RUnlock()
	return calls
}

// GetFavorites calls GetFavoritesFunc.
func (mock *MockMovieCompilationsServer) GetFavorites(contextMoqParam context.Context, getFavoritesOptions *proto.GetFavoritesOptions) (*proto.MovieCompilationsArr, error) {
	if mock.GetFavoritesFunc == nil {
		panic("MockMovieCompilationsServer.GetFavoritesFunc: method is nil but MovieCompilationsServer.GetFavorites was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		GetFavoritesOptions *proto.GetFavoritesOptions
	}{
		ContextMoqParam:     contextMoqParam,
		GetFavoritesOptions: getFavoritesOptions,
	}
	mock.lockGetFavorites.Lock()
	mock.calls.GetFavorites = append(mock.calls.GetFavorites, callInfo)
	mock.lockGetFavorites.Unlock()
	return mock.GetFavoritesFunc(contextMoqParam, getFavoritesOptions)
}

// GetFavoritesCalls gets all the calls that were made to GetFavorites.
// Check the length with:
//     len(mockedMovieCompilationsServer.GetFavoritesCalls())
func (mock *MockMovieCompilationsServer) GetFavoritesCalls() []struct {
	ContextMoqParam     context.Context
	GetFavoritesOptions *proto.GetFavoritesOptions
} {
	var calls []struct {
		ContextMoqParam     context.Context
		GetFavoritesOptions *proto.GetFavoritesOptions
	}
	mock.lockGetFavorites.RLock()
	calls = mock.calls.GetFavorites
	mock.lockGetFavorites.RUnlock()
	return calls
}

// GetFavoritesFilms calls GetFavoritesFilmsFunc.
func (mock *MockMovieCompilationsServer) GetFavoritesFilms(contextMoqParam context.Context, getFavoritesOptions *proto.GetFavoritesOptions) (*proto.MovieCompilation, error) {
	if mock.GetFavoritesFilmsFunc == nil {
		panic("MockMovieCompilationsServer.GetFavoritesFilmsFunc: method is nil but MovieCompilationsServer.GetFavoritesFilms was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		GetFavoritesOptions *proto.GetFavoritesOptions
	}{
		ContextMoqParam:     contextMoqParam,
		GetFavoritesOptions: getFavoritesOptions,
	}
	mock.lockGetFavoritesFilms.Lock()
	mock.calls.GetFavoritesFilms = append(mock.calls.GetFavoritesFilms, callInfo)
	mock.lockGetFavoritesFilms.Unlock()
	return mock.GetFavoritesFilmsFunc(contextMoqParam, getFavoritesOptions)
}

// GetFavoritesFilmsCalls gets all the calls that were made to GetFavoritesFilms.
// Check the length with:
//     len(mockedMovieCompilationsServer.GetFavoritesFilmsCalls())
func (mock *MockMovieCompilationsServer) GetFavoritesFilmsCalls() []struct {
	ContextMoqParam     context.Context
	GetFavoritesOptions *proto.GetFavoritesOptions
} {
	var calls []struct {
		ContextMoqParam     context.Context
		GetFavoritesOptions *proto.GetFavoritesOptions
	}
	mock.lockGetFavoritesFilms.RLock()
	calls = mock.calls.GetFavoritesFilms
	mock.lockGetFavoritesFilms.RUnlock()
	return calls
}

// GetFavoritesSeries calls GetFavoritesSeriesFunc.
func (mock *MockMovieCompilationsServer) GetFavoritesSeries(contextMoqParam context.Context, getFavoritesOptions *proto.GetFavoritesOptions) (*proto.MovieCompilation, error) {
	if mock.GetFavoritesSeriesFunc == nil {
		panic("MockMovieCompilationsServer.GetFavoritesSeriesFunc: method is nil but MovieCompilationsServer.GetFavoritesSeries was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		GetFavoritesOptions *proto.GetFavoritesOptions
	}{
		ContextMoqParam:     contextMoqParam,
		GetFavoritesOptions: getFavoritesOptions,
	}
	mock.lockGetFavoritesSeries.Lock()
	mock.calls.GetFavoritesSeries = append(mock.calls.GetFavoritesSeries, callInfo)
	mock.lockGetFavoritesSeries.Unlock()
	return mock.GetFavoritesSeriesFunc(contextMoqParam, getFavoritesOptions)
}

// GetFavoritesSeriesCalls gets all the calls that were made to GetFavoritesSeries.
// Check the length with:
//     len(mockedMovieCompilationsServer.GetFavoritesSeriesCalls())
func (mock *MockMovieCompilationsServer) GetFavoritesSeriesCalls() []struct {
	ContextMoqParam     context.Context
	GetFavoritesOptions *proto.GetFavoritesOptions
} {
	var calls []struct {
		ContextMoqParam     context.Context
		GetFavoritesOptions *proto.GetFavoritesOptions
	}
	mock.lockGetFavoritesSeries.RLock()
	calls = mock.calls.GetFavoritesSeries
	mock.lockGetFavoritesSeries.RUnlock()
	return calls
}

// GetMainCompilations calls GetMainCompilationsFunc.
func (mock *MockMovieCompilationsServer) GetMainCompilations(contextMoqParam context.Context, getMainCompilationsOptions *proto.GetMainCompilationsOptions) (*proto.MovieCompilationsArr, error) {
	if mock.GetMainCompilationsFunc == nil {
		panic("MockMovieCompilationsServer.GetMainCompilationsFunc: method is nil but MovieCompilationsServer.GetMainCompilations was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		GetMainCompilationsOptions *proto.GetMainCompilationsOptions
	}{
		ContextMoqParam:            contextMoqParam,
		GetMainCompilationsOptions: getMainCompilationsOptions,
	}
	mock.lockGetMainCompilations.Lock()
	mock.calls.GetMainCompilations = append(mock.calls.GetMainCompilations, callInfo)
	mock.lockGetMainCompilations.Unlock()
	return mock.GetMainCompilationsFunc(contextMoqParam, getMainCompilationsOptions)
}

// GetMainCompilationsCalls gets all the calls that were made to GetMainCompilations.
// Check the length with:
//     len(mockedMovieCompilationsServer.GetMainCompilationsCalls())
func (mock *MockMovieCompilationsServer) GetMainCompilationsCalls() []struct {
	ContextMoqParam            context.Context
	GetMainCompilationsOptions *proto.GetMainCompilationsOptions
} {
	var calls []struct {
		ContextMoqParam            context.Context
		GetMainCompilationsOptions *proto.GetMainCompilationsOptions
	}
	mock.lockGetMainCompilations.RLock()
	calls = mock.calls.GetMainCompilations
	mock.lockGetMainCompilations.RUnlock()
	return calls
}

// GetTop calls GetTopFunc.
func (mock *MockMovieCompilationsServer) GetTop(contextMoqParam context.Context, getCompilationOptions *proto.GetCompilationOptions) (*proto.MovieCompilation, error) {
	if mock.GetTopFunc == nil {
		panic("MockMovieCompilationsServer.GetTopFunc: method is nil but MovieCompilationsServer.GetTop was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		GetCompilationOptions *proto.GetCompilationOptions
	}{
		ContextMoqParam:       contextMoqParam,
		GetCompilationOptions: getCompilationOptions,
	}
	mock.lockGetTop.Lock()
	mock.calls.GetTop = append(mock.calls.GetTop, callInfo)
	mock.lockGetTop.Unlock()
	return mock.GetTopFunc(contextMoqParam, getCompilationOptions)
}

// GetTopCalls gets all the calls that were made to GetTop.
// Check the length with:
//     len(mockedMovieCompilationsServer.GetTopCalls())
func (mock *MockMovieCompilationsServer) GetTopCalls() []struct {
	ContextMoqParam       context.Context
	GetCompilationOptions *proto.GetCompilationOptions
} {
	var calls []struct {
		ContextMoqParam       context.Context
		GetCompilationOptions *proto.GetCompilationOptions
	}
	mock.lockGetTop.RLock()
	calls = mock.calls.GetTop
	mock.lockGetTop.RUnlock()
	return calls
}

// GetTopByYear calls GetTopByYearFunc.
func (mock *MockMovieCompilationsServer) GetTopByYear(contextMoqParam context.Context, getByIDOptions *proto.GetByIDOptions) (*proto.MovieCompilation, error) {
	if mock.GetTopByYearFunc == nil {
		panic("MockMovieCompilationsServer.GetTopByYearFunc: method is nil but MovieCompilationsServer.GetTopByYear was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		GetByIDOptions  *proto.GetByIDOptions
	}{
		ContextMoqParam: contextMoqParam,
		GetByIDOptions:  getByIDOptions,
	}
	mock.lockGetTopByYear.Lock()
	mock.calls.GetTopByYear = append(mock.calls.GetTopByYear, callInfo)
	mock.lockGetTopByYear.Unlock()
	return mock.GetTopByYearFunc(contextMoqParam, getByIDOptions)
}

// GetTopByYearCalls gets all the calls that were made to GetTopByYear.
// Check the length with:
//     len(mockedMovieCompilationsServer.GetTopByYearCalls())
func (mock *MockMovieCompilationsServer) GetTopByYearCalls() []struct {
	ContextMoqParam context.Context
	GetByIDOptions  *proto.GetByIDOptions
} {
	var calls []struct {
		ContextMoqParam context.Context
		GetByIDOptions  *proto.GetByIDOptions
	}
	mock.lockGetTopByYear.RLock()
	calls = mock.calls.GetTopByYear
	mock.lockGetTopByYear.RUnlock()
	return calls
}
