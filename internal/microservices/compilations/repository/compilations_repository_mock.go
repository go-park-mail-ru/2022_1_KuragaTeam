// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"myapp/internal/microservices/compilations"
	"myapp/internal/microservices/compilations/proto"
	"sync"
)

// Ensure, that MockMovieCompilationStorage does implement compilations.Storage.
// If this is not the case, regenerate this file with moq.
var _ compilations.Storage = &MockMovieCompilationStorage{}

// MockMovieCompilationStorage is a mock implementation of compilations.Storage.
//
// 	func TestSomethingThatUsesStorage(t *testing.T) {
//
// 		// make and configure a mocked compilations.Storage
// 		mockedStorage := &MockMovieCompilationStorage{
// 			FindMovieFunc: func(text string, isMovie bool) (*proto.MovieCompilation, error) {
// 				panic("mock out the FindMovie method")
// 			},
// 			FindMovieByPartialFunc: func(text string, isMovie bool) (*proto.MovieCompilation, error) {
// 				panic("mock out the FindMovieByPartial method")
// 			},
// 			GetAllMoviesFunc: func(limit int, offset int, isMovie bool) (*proto.MovieCompilation, error) {
// 				panic("mock out the GetAllMovies method")
// 			},
// 			GetByCountryFunc: func(countryID int) (*proto.MovieCompilation, error) {
// 				panic("mock out the GetByCountry method")
// 			},
// 			GetByGenreFunc: func(genreID int) (*proto.MovieCompilation, error) {
// 				panic("mock out the GetByGenre method")
// 			},
// 			GetByMovieFunc: func(movieID int) (*proto.MovieCompilation, error) {
// 				panic("mock out the GetByMovie method")
// 			},
// 			GetByPersonFunc: func(personID int) (*proto.MovieCompilation, error) {
// 				panic("mock out the GetByPerson method")
// 			},
// 			GetFavoritesFunc: func(data *proto.GetFavoritesOptions) (*proto.MovieCompilationsArr, error) {
// 				panic("mock out the GetFavorites method")
// 			},
// 			GetFavoritesFilmsFunc: func(data *proto.GetFavoritesOptions) (*proto.MovieCompilation, error) {
// 				panic("mock out the GetFavoritesFilms method")
// 			},
// 			GetFavoritesSeriesFunc: func(data *proto.GetFavoritesOptions) (*proto.MovieCompilation, error) {
// 				panic("mock out the GetFavoritesSeries method")
// 			},
// 			GetTopFunc: func(limit int) (*proto.MovieCompilation, error) {
// 				panic("mock out the GetTop method")
// 			},
// 			GetTopByYearFunc: func(year int) (*proto.MovieCompilation, error) {
// 				panic("mock out the GetTopByYear method")
// 			},
// 		}
//
// 		// use mockedStorage in code that requires compilations.Storage
// 		// and then make assertions.
//
// 	}
type MockMovieCompilationStorage struct {
	// FindMovieFunc mocks the FindMovie method.
	FindMovieFunc func(text string, isMovie bool) (*proto.MovieCompilation, error)

	// FindMovieByPartialFunc mocks the FindMovieByPartial method.
	FindMovieByPartialFunc func(text string, isMovie bool) (*proto.MovieCompilation, error)

	// GetAllMoviesFunc mocks the GetAllMovies method.
	GetAllMoviesFunc func(limit int, offset int, isMovie bool) (*proto.MovieCompilation, error)

	// GetByCountryFunc mocks the GetByCountry method.
	GetByCountryFunc func(countryID int) (*proto.MovieCompilation, error)

	// GetByGenreFunc mocks the GetByGenre method.
	GetByGenreFunc func(genreID int) (*proto.MovieCompilation, error)

	// GetByMovieFunc mocks the GetByMovie method.
	GetByMovieFunc func(movieID int) (*proto.MovieCompilation, error)

	// GetByPersonFunc mocks the GetByPerson method.
	GetByPersonFunc func(personID int) (*proto.MovieCompilation, error)

	// GetFavoritesFunc mocks the GetFavorites method.
	GetFavoritesFunc func(data *proto.GetFavoritesOptions) (*proto.MovieCompilationsArr, error)

	// GetFavoritesFilmsFunc mocks the GetFavoritesFilms method.
	GetFavoritesFilmsFunc func(data *proto.GetFavoritesOptions) (*proto.MovieCompilation, error)

	// GetFavoritesSeriesFunc mocks the GetFavoritesSeries method.
	GetFavoritesSeriesFunc func(data *proto.GetFavoritesOptions) (*proto.MovieCompilation, error)

	// GetTopFunc mocks the GetTop method.
	GetTopFunc func(limit int) (*proto.MovieCompilation, error)

	// GetTopByYearFunc mocks the GetTopByYear method.
	GetTopByYearFunc func(year int) (*proto.MovieCompilation, error)

	// calls tracks calls to the methods.
	calls struct {
		// FindMovie holds details about calls to the FindMovie method.
		FindMovie []struct {
			// Text is the text argument value.
			Text string
			// IsMovie is the isMovie argument value.
			IsMovie bool
		}
		// FindMovieByPartial holds details about calls to the FindMovieByPartial method.
		FindMovieByPartial []struct {
			// Text is the text argument value.
			Text string
			// IsMovie is the isMovie argument value.
			IsMovie bool
		}
		// GetAllMovies holds details about calls to the GetAllMovies method.
		GetAllMovies []struct {
			// Limit is the limit argument value.
			Limit int
			// Offset is the offset argument value.
			Offset int
			// IsMovie is the isMovie argument value.
			IsMovie bool
		}
		// GetByCountry holds details about calls to the GetByCountry method.
		GetByCountry []struct {
			// CountryID is the countryID argument value.
			CountryID int
		}
		// GetByGenre holds details about calls to the GetByGenre method.
		GetByGenre []struct {
			// GenreID is the genreID argument value.
			GenreID int
		}
		// GetByMovie holds details about calls to the GetByMovie method.
		GetByMovie []struct {
			// MovieID is the movieID argument value.
			MovieID int
		}
		// GetByPerson holds details about calls to the GetByPerson method.
		GetByPerson []struct {
			// PersonID is the personID argument value.
			PersonID int
		}
		// GetFavorites holds details about calls to the GetFavorites method.
		GetFavorites []struct {
			// Data is the data argument value.
			Data *proto.GetFavoritesOptions
		}
		// GetFavoritesFilms holds details about calls to the GetFavoritesFilms method.
		GetFavoritesFilms []struct {
			// Data is the data argument value.
			Data *proto.GetFavoritesOptions
		}
		// GetFavoritesSeries holds details about calls to the GetFavoritesSeries method.
		GetFavoritesSeries []struct {
			// Data is the data argument value.
			Data *proto.GetFavoritesOptions
		}
		// GetTop holds details about calls to the GetTop method.
		GetTop []struct {
			// Limit is the limit argument value.
			Limit int
		}
		// GetTopByYear holds details about calls to the GetTopByYear method.
		GetTopByYear []struct {
			// Year is the year argument value.
			Year int
		}
	}
	lockFindMovie          sync.RWMutex
	lockFindMovieByPartial sync.RWMutex
	lockGetAllMovies       sync.RWMutex
	lockGetByCountry       sync.RWMutex
	lockGetByGenre         sync.RWMutex
	lockGetByMovie         sync.RWMutex
	lockGetByPerson        sync.RWMutex
	lockGetFavorites       sync.RWMutex
	lockGetFavoritesFilms  sync.RWMutex
	lockGetFavoritesSeries sync.RWMutex
	lockGetTop             sync.RWMutex
	lockGetTopByYear       sync.RWMutex
}

// FindMovie calls FindMovieFunc.
func (mock *MockMovieCompilationStorage) FindMovie(text string, isMovie bool) (*proto.MovieCompilation, error) {
	if mock.FindMovieFunc == nil {
		panic("MockMovieCompilationStorage.FindMovieFunc: method is nil but Storage.FindMovie was just called")
	}
	callInfo := struct {
		Text    string
		IsMovie bool
	}{
		Text:    text,
		IsMovie: isMovie,
	}
	mock.lockFindMovie.Lock()
	mock.calls.FindMovie = append(mock.calls.FindMovie, callInfo)
	mock.lockFindMovie.Unlock()
	return mock.FindMovieFunc(text, isMovie)
}

// FindMovieCalls gets all the calls that were made to FindMovie.
// Check the length with:
//     len(mockedStorage.FindMovieCalls())
func (mock *MockMovieCompilationStorage) FindMovieCalls() []struct {
	Text    string
	IsMovie bool
} {
	var calls []struct {
		Text    string
		IsMovie bool
	}
	mock.lockFindMovie.RLock()
	calls = mock.calls.FindMovie
	mock.lockFindMovie.RUnlock()
	return calls
}

// FindMovieByPartial calls FindMovieByPartialFunc.
func (mock *MockMovieCompilationStorage) FindMovieByPartial(text string, isMovie bool) (*proto.MovieCompilation, error) {
	if mock.FindMovieByPartialFunc == nil {
		panic("MockMovieCompilationStorage.FindMovieByPartialFunc: method is nil but Storage.FindMovieByPartial was just called")
	}
	callInfo := struct {
		Text    string
		IsMovie bool
	}{
		Text:    text,
		IsMovie: isMovie,
	}
	mock.lockFindMovieByPartial.Lock()
	mock.calls.FindMovieByPartial = append(mock.calls.FindMovieByPartial, callInfo)
	mock.lockFindMovieByPartial.Unlock()
	return mock.FindMovieByPartialFunc(text, isMovie)
}

// FindMovieByPartialCalls gets all the calls that were made to FindMovieByPartial.
// Check the length with:
//     len(mockedStorage.FindMovieByPartialCalls())
func (mock *MockMovieCompilationStorage) FindMovieByPartialCalls() []struct {
	Text    string
	IsMovie bool
} {
	var calls []struct {
		Text    string
		IsMovie bool
	}
	mock.lockFindMovieByPartial.RLock()
	calls = mock.calls.FindMovieByPartial
	mock.lockFindMovieByPartial.RUnlock()
	return calls
}

// GetAllMovies calls GetAllMoviesFunc.
func (mock *MockMovieCompilationStorage) GetAllMovies(limit int, offset int, isMovie bool) (*proto.MovieCompilation, error) {
	if mock.GetAllMoviesFunc == nil {
		panic("MockMovieCompilationStorage.GetAllMoviesFunc: method is nil but Storage.GetAllMovies was just called")
	}
	callInfo := struct {
		Limit   int
		Offset  int
		IsMovie bool
	}{
		Limit:   limit,
		Offset:  offset,
		IsMovie: isMovie,
	}
	mock.lockGetAllMovies.Lock()
	mock.calls.GetAllMovies = append(mock.calls.GetAllMovies, callInfo)
	mock.lockGetAllMovies.Unlock()
	return mock.GetAllMoviesFunc(limit, offset, isMovie)
}

// GetAllMoviesCalls gets all the calls that were made to GetAllMovies.
// Check the length with:
//     len(mockedStorage.GetAllMoviesCalls())
func (mock *MockMovieCompilationStorage) GetAllMoviesCalls() []struct {
	Limit   int
	Offset  int
	IsMovie bool
} {
	var calls []struct {
		Limit   int
		Offset  int
		IsMovie bool
	}
	mock.lockGetAllMovies.RLock()
	calls = mock.calls.GetAllMovies
	mock.lockGetAllMovies.RUnlock()
	return calls
}

// GetByCountry calls GetByCountryFunc.
func (mock *MockMovieCompilationStorage) GetByCountry(countryID int) (*proto.MovieCompilation, error) {
	if mock.GetByCountryFunc == nil {
		panic("MockMovieCompilationStorage.GetByCountryFunc: method is nil but Storage.GetByCountry was just called")
	}
	callInfo := struct {
		CountryID int
	}{
		CountryID: countryID,
	}
	mock.lockGetByCountry.Lock()
	mock.calls.GetByCountry = append(mock.calls.GetByCountry, callInfo)
	mock.lockGetByCountry.Unlock()
	return mock.GetByCountryFunc(countryID)
}

// GetByCountryCalls gets all the calls that were made to GetByCountry.
// Check the length with:
//     len(mockedStorage.GetByCountryCalls())
func (mock *MockMovieCompilationStorage) GetByCountryCalls() []struct {
	CountryID int
} {
	var calls []struct {
		CountryID int
	}
	mock.lockGetByCountry.RLock()
	calls = mock.calls.GetByCountry
	mock.lockGetByCountry.RUnlock()
	return calls
}

// GetByGenre calls GetByGenreFunc.
func (mock *MockMovieCompilationStorage) GetByGenre(genreID int) (*proto.MovieCompilation, error) {
	if mock.GetByGenreFunc == nil {
		panic("MockMovieCompilationStorage.GetByGenreFunc: method is nil but Storage.GetByGenre was just called")
	}
	callInfo := struct {
		GenreID int
	}{
		GenreID: genreID,
	}
	mock.lockGetByGenre.Lock()
	mock.calls.GetByGenre = append(mock.calls.GetByGenre, callInfo)
	mock.lockGetByGenre.Unlock()
	return mock.GetByGenreFunc(genreID)
}

// GetByGenreCalls gets all the calls that were made to GetByGenre.
// Check the length with:
//     len(mockedStorage.GetByGenreCalls())
func (mock *MockMovieCompilationStorage) GetByGenreCalls() []struct {
	GenreID int
} {
	var calls []struct {
		GenreID int
	}
	mock.lockGetByGenre.RLock()
	calls = mock.calls.GetByGenre
	mock.lockGetByGenre.RUnlock()
	return calls
}

// GetByMovie calls GetByMovieFunc.
func (mock *MockMovieCompilationStorage) GetByMovie(movieID int) (*proto.MovieCompilation, error) {
	if mock.GetByMovieFunc == nil {
		panic("MockMovieCompilationStorage.GetByMovieFunc: method is nil but Storage.GetByMovie was just called")
	}
	callInfo := struct {
		MovieID int
	}{
		MovieID: movieID,
	}
	mock.lockGetByMovie.Lock()
	mock.calls.GetByMovie = append(mock.calls.GetByMovie, callInfo)
	mock.lockGetByMovie.Unlock()
	return mock.GetByMovieFunc(movieID)
}

// GetByMovieCalls gets all the calls that were made to GetByMovie.
// Check the length with:
//     len(mockedStorage.GetByMovieCalls())
func (mock *MockMovieCompilationStorage) GetByMovieCalls() []struct {
	MovieID int
} {
	var calls []struct {
		MovieID int
	}
	mock.lockGetByMovie.RLock()
	calls = mock.calls.GetByMovie
	mock.lockGetByMovie.RUnlock()
	return calls
}

// GetByPerson calls GetByPersonFunc.
func (mock *MockMovieCompilationStorage) GetByPerson(personID int) (*proto.MovieCompilation, error) {
	if mock.GetByPersonFunc == nil {
		panic("MockMovieCompilationStorage.GetByPersonFunc: method is nil but Storage.GetByPerson was just called")
	}
	callInfo := struct {
		PersonID int
	}{
		PersonID: personID,
	}
	mock.lockGetByPerson.Lock()
	mock.calls.GetByPerson = append(mock.calls.GetByPerson, callInfo)
	mock.lockGetByPerson.Unlock()
	return mock.GetByPersonFunc(personID)
}

// GetByPersonCalls gets all the calls that were made to GetByPerson.
// Check the length with:
//     len(mockedStorage.GetByPersonCalls())
func (mock *MockMovieCompilationStorage) GetByPersonCalls() []struct {
	PersonID int
} {
	var calls []struct {
		PersonID int
	}
	mock.lockGetByPerson.RLock()
	calls = mock.calls.GetByPerson
	mock.lockGetByPerson.RUnlock()
	return calls
}

// GetFavorites calls GetFavoritesFunc.
func (mock *MockMovieCompilationStorage) GetFavorites(data *proto.GetFavoritesOptions) (*proto.MovieCompilationsArr, error) {
	if mock.GetFavoritesFunc == nil {
		panic("MockMovieCompilationStorage.GetFavoritesFunc: method is nil but Storage.GetFavorites was just called")
	}
	callInfo := struct {
		Data *proto.GetFavoritesOptions
	}{
		Data: data,
	}
	mock.lockGetFavorites.Lock()
	mock.calls.GetFavorites = append(mock.calls.GetFavorites, callInfo)
	mock.lockGetFavorites.Unlock()
	return mock.GetFavoritesFunc(data)
}

// GetFavoritesCalls gets all the calls that were made to GetFavorites.
// Check the length with:
//     len(mockedStorage.GetFavoritesCalls())
func (mock *MockMovieCompilationStorage) GetFavoritesCalls() []struct {
	Data *proto.GetFavoritesOptions
} {
	var calls []struct {
		Data *proto.GetFavoritesOptions
	}
	mock.lockGetFavorites.RLock()
	calls = mock.calls.GetFavorites
	mock.lockGetFavorites.RUnlock()
	return calls
}

// GetFavoritesFilms calls GetFavoritesFilmsFunc.
func (mock *MockMovieCompilationStorage) GetFavoritesFilms(data *proto.GetFavoritesOptions) (*proto.MovieCompilation, error) {
	if mock.GetFavoritesFilmsFunc == nil {
		panic("MockMovieCompilationStorage.GetFavoritesFilmsFunc: method is nil but Storage.GetFavoritesFilms was just called")
	}
	callInfo := struct {
		Data *proto.GetFavoritesOptions
	}{
		Data: data,
	}
	mock.lockGetFavoritesFilms.Lock()
	mock.calls.GetFavoritesFilms = append(mock.calls.GetFavoritesFilms, callInfo)
	mock.lockGetFavoritesFilms.Unlock()
	return mock.GetFavoritesFilmsFunc(data)
}

// GetFavoritesFilmsCalls gets all the calls that were made to GetFavoritesFilms.
// Check the length with:
//     len(mockedStorage.GetFavoritesFilmsCalls())
func (mock *MockMovieCompilationStorage) GetFavoritesFilmsCalls() []struct {
	Data *proto.GetFavoritesOptions
} {
	var calls []struct {
		Data *proto.GetFavoritesOptions
	}
	mock.lockGetFavoritesFilms.RLock()
	calls = mock.calls.GetFavoritesFilms
	mock.lockGetFavoritesFilms.RUnlock()
	return calls
}

// GetFavoritesSeries calls GetFavoritesSeriesFunc.
func (mock *MockMovieCompilationStorage) GetFavoritesSeries(data *proto.GetFavoritesOptions) (*proto.MovieCompilation, error) {
	if mock.GetFavoritesSeriesFunc == nil {
		panic("MockMovieCompilationStorage.GetFavoritesSeriesFunc: method is nil but Storage.GetFavoritesSeries was just called")
	}
	callInfo := struct {
		Data *proto.GetFavoritesOptions
	}{
		Data: data,
	}
	mock.lockGetFavoritesSeries.Lock()
	mock.calls.GetFavoritesSeries = append(mock.calls.GetFavoritesSeries, callInfo)
	mock.lockGetFavoritesSeries.Unlock()
	return mock.GetFavoritesSeriesFunc(data)
}

// GetFavoritesSeriesCalls gets all the calls that were made to GetFavoritesSeries.
// Check the length with:
//     len(mockedStorage.GetFavoritesSeriesCalls())
func (mock *MockMovieCompilationStorage) GetFavoritesSeriesCalls() []struct {
	Data *proto.GetFavoritesOptions
} {
	var calls []struct {
		Data *proto.GetFavoritesOptions
	}
	mock.lockGetFavoritesSeries.RLock()
	calls = mock.calls.GetFavoritesSeries
	mock.lockGetFavoritesSeries.RUnlock()
	return calls
}

// GetTop calls GetTopFunc.
func (mock *MockMovieCompilationStorage) GetTop(limit int) (*proto.MovieCompilation, error) {
	if mock.GetTopFunc == nil {
		panic("MockMovieCompilationStorage.GetTopFunc: method is nil but Storage.GetTop was just called")
	}
	callInfo := struct {
		Limit int
	}{
		Limit: limit,
	}
	mock.lockGetTop.Lock()
	mock.calls.GetTop = append(mock.calls.GetTop, callInfo)
	mock.lockGetTop.Unlock()
	return mock.GetTopFunc(limit)
}

// GetTopCalls gets all the calls that were made to GetTop.
// Check the length with:
//     len(mockedStorage.GetTopCalls())
func (mock *MockMovieCompilationStorage) GetTopCalls() []struct {
	Limit int
} {
	var calls []struct {
		Limit int
	}
	mock.lockGetTop.RLock()
	calls = mock.calls.GetTop
	mock.lockGetTop.RUnlock()
	return calls
}

// GetTopByYear calls GetTopByYearFunc.
func (mock *MockMovieCompilationStorage) GetTopByYear(year int) (*proto.MovieCompilation, error) {
	if mock.GetTopByYearFunc == nil {
		panic("MockMovieCompilationStorage.GetTopByYearFunc: method is nil but Storage.GetTopByYear was just called")
	}
	callInfo := struct {
		Year int
	}{
		Year: year,
	}
	mock.lockGetTopByYear.Lock()
	mock.calls.GetTopByYear = append(mock.calls.GetTopByYear, callInfo)
	mock.lockGetTopByYear.Unlock()
	return mock.GetTopByYearFunc(year)
}

// GetTopByYearCalls gets all the calls that were made to GetTopByYear.
// Check the length with:
//     len(mockedStorage.GetTopByYearCalls())
func (mock *MockMovieCompilationStorage) GetTopByYearCalls() []struct {
	Year int
} {
	var calls []struct {
		Year int
	}
	mock.lockGetTopByYear.RLock()
	calls = mock.calls.GetTopByYear
	mock.lockGetTopByYear.RUnlock()
	return calls
}
